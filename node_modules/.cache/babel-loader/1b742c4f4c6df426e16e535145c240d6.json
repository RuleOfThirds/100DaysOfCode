{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Wizard.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MainBar from '../Helpers/MainBar';\nimport RecipeType from './RecipeType';\nimport BasicInfo from './BasicInfo';\nimport BaseSpirit from './BaseSpirit';\nimport Ingredients from './Ingredients';\nimport Instructions from './Instructions';\nimport Help from './Help';\nimport { Typography, Collapse, IconButton, Button, Stepper, Step, StepLabel, StepContent } from '@material-ui/core';\nimport { Link as Scroll } from 'react-scroll';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    backgroundColor: '#303030',\n    position: 'sticky',\n    top: 0,\n    zIndex: 1\n  },\n  infoButton: {\n    float: 'right'\n  },\n  button: {\n    borderRadius: 37,\n    width: 250\n  },\n  buttonDiv: {\n    flex: 1,\n    margin: 25,\n    textAlign: 'center'\n  }\n})); // You may need to refer to this: https://stackoverflow.com/questions/61215349/material-ui-stepper-not-keeping-state-when-move-next-or-back\n\nfunction renderCocktailSteps(step) {\n  switch (step) {\n    case 0:\n      return /*#__PURE__*/_jsxDEV(BasicInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 14\n      }, this);\n\n    case 1:\n      return /*#__PURE__*/_jsxDEV(BaseSpirit, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 14\n      }, this);\n\n    case 2:\n      return /*#__PURE__*/_jsxDEV(Ingredients, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 14\n      }, this);\n\n    case 3:\n      return /*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }, this);\n\n    default:\n      return false;\n  }\n}\n\nfunction renderNonCocktailSteps(step) {\n  switch (step) {\n    case 0:\n      // this needs to be different\n      return /*#__PURE__*/_jsxDEV(BasicInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 14\n      }, this);\n\n    case 1:\n      return /*#__PURE__*/_jsxDEV(Ingredients, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 14\n      }, this);\n\n    case 2:\n      // This also needs to be different\n      return /*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }, this);\n\n    default:\n      return false;\n  }\n}\n\nfunction NavAppBar({\n  steps,\n  activeStep,\n  handleBack,\n  handleNext,\n  handleReview,\n  handleHelp\n}) {\n  _s();\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.appBar,\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      disabled: activeStep === 0,\n      onClick: handleBack,\n      children: /*#__PURE__*/_jsxDEV(ExpandLessIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n      to: `step-${activeStep}`,\n      smooth: \"true\",\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleNext,\n        children: // If you're on the last step then display the CheckCircle instead of the ExpandMore\n        activeStep >= steps.length - 1 ? /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n          onClick: handleReview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), // If you're at the end of your stepper then stop showing the help icon\n    activeStep <= steps.length - 1 ? /*#__PURE__*/_jsxDEV(IconButton, {\n      className: classes.infoButton,\n      onClick: handleHelp,\n      children: /*#__PURE__*/_jsxDEV(InfoOutlinedIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this) : false]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NavAppBar, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = NavAppBar;\n\nfunction StepperControl({\n  steps,\n  activeStep,\n  handleNext,\n  stepperPath\n}) {\n  _s2();\n\n  const classes = useStyles();\n  const [checked, setChecked] = useState(false);\n  useEffect(() => {\n    setChecked(true);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Collapse, {\n    appear: true,\n    in: checked,\n    ...(checked ? {\n      timeout: 1000\n    } : {}),\n    children: /*#__PURE__*/_jsxDEV(Stepper, {\n      id: `step-${activeStep}`,\n      activeStep: activeStep,\n      orientation: \"vertical\",\n      children: steps.map((label, index) => /*#__PURE__*/_jsxDEV(Step, {\n        children: [/*#__PURE__*/_jsxDEV(StepLabel, {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(StepContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: stepperPath(index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this), // Stop showing the secondary ExpandMoreIcon if you've reached the Instructions step\n          // Also, this ExpandMoreIcon should push data to the recipe object array\n          index < steps.length - 1 ? /*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"primary\",\n            children: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n              onClick: handleNext,\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 23\n          }, this) : false]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }, this)]\n      }, label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(StepperControl, \"LPnST3A/qNBWkYLQhh0EGXJ4C04=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = StepperControl;\nexport default function Wizard() {\n  _s3();\n\n  const classes = useStyles();\n  const steps = ['Basic Information', 'Base Spirit', 'Ingredients', 'Instructions'];\n  const [activeStep, setActiveStep] = useState(0);\n  const [readyForReview, setReadyForReview] = useState(false);\n  const [recipeType, setRecipeType] = useState(false);\n  const [showHelp, setShowHelp] = useState(false);\n\n  const handleHelp = () => {\n    setShowHelp(!showHelp);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleNext = () => {\n    // This should also be pushing the entered data into the object\n    // This could get complicated. I'll need to give each input a unique ID so that if I backtrack I can have it update\n    // The unique item you'd want to change otherwise stuff could get messy\n    if (activeStep < steps.length) {\n      setActiveStep(prevActiveStep => prevActiveStep + 1);\n    }\n  };\n\n  const handleRecipeType = event => {\n    setRecipeType(event.target.value);\n  };\n\n  const handleReview = () => {\n    setReadyForReview(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(MainBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecipeType, {\n      handleRecipeType: handleRecipeType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavAppBar, {\n      steps: steps,\n      activeStep: activeStep,\n      handleBack: handleBack,\n      handleNext: handleNext,\n      handleReview: handleReview,\n      handleHelp: handleHelp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), // Decide what Stepper type to show\n    !recipeType ? false : recipeType === 'cocktail' ? /*#__PURE__*/_jsxDEV(StepperControl, {\n      steps: steps,\n      activeStep: activeStep,\n      handleNext: handleNext,\n      stepperPath: renderCocktailSteps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(StepperControl, {\n      steps: steps,\n      activeStep: activeStep,\n      handleNext: handleNext,\n      stepperPath: renderNonCocktailSteps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonDiv,\n      children: // Once all steps are completed then display the Review button\n      readyForReview && activeStep >= steps.length ? /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.button,\n        variant: \"outlined\",\n        color: \"primary\",\n        href: \"/cocktail\",\n        onClick: () => console.log(\"Went to next\"),\n        children: \"Review\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }, this) : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(Wizard, \"XphaQXpHCHA4ERy0qWHHKtGyVaI=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = Wizard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"NavAppBar\");\n$RefreshReg$(_c2, \"StepperControl\");\n$RefreshReg$(_c3, \"Wizard\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Wizard.js"],"names":["React","useState","useEffect","MainBar","RecipeType","BasicInfo","BaseSpirit","Ingredients","Instructions","Help","Typography","Collapse","IconButton","Button","Stepper","Step","StepLabel","StepContent","Link","Scroll","ExpandMoreIcon","ExpandLessIcon","CheckCircleIcon","InfoOutlinedIcon","makeStyles","useStyles","theme","appBar","backgroundColor","position","top","zIndex","infoButton","float","button","borderRadius","width","buttonDiv","flex","margin","textAlign","renderCocktailSteps","step","renderNonCocktailSteps","NavAppBar","steps","activeStep","handleBack","handleNext","handleReview","handleHelp","classes","length","StepperControl","stepperPath","checked","setChecked","timeout","map","label","index","Wizard","setActiveStep","readyForReview","setReadyForReview","recipeType","setRecipeType","showHelp","setShowHelp","prevActiveStep","handleRecipeType","event","target","value","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MainBar from '../Helpers/MainBar';\nimport RecipeType from './RecipeType';\nimport BasicInfo from './BasicInfo';\nimport BaseSpirit from './BaseSpirit';\nimport Ingredients from './Ingredients';\nimport Instructions from './Instructions';\nimport Help from './Help';\nimport {\n  Typography,\n  Collapse,\n  IconButton,\n  Button,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n} from '@material-ui/core';\nimport { Link as Scroll } from 'react-scroll';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    backgroundColor: '#303030',\n    position: 'sticky',\n    top: 0,\n    zIndex: 1,\n  },\n  infoButton: {\n    float: 'right',\n  },\n  button: {\n    borderRadius: 37,\n    width: 250\n  },\n  buttonDiv: {\n    flex: 1,\n    margin: 25,\n    textAlign: 'center',\n  },\n}));\n\n// You may need to refer to this: https://stackoverflow.com/questions/61215349/material-ui-stepper-not-keeping-state-when-move-next-or-back\nfunction renderCocktailSteps(step) {\n  switch (step) {\n    case 0:\n      return <BasicInfo />\n    case 1:\n      return <BaseSpirit />\n    case 2:\n      return <Ingredients />\n    case 3: \n      return <Instructions />\n    default:\n      return false\n  }\n}\n\nfunction renderNonCocktailSteps(step) {\n  switch (step) {\n    case 0:\n        // this needs to be different\n      return <BasicInfo />\n    case 1:\n      return <Ingredients />\n    case 2: \n      // This also needs to be different\n      return <Instructions />\n    default:\n      return false\n  }\n}\n\nfunction NavAppBar({ steps, activeStep, handleBack, handleNext, handleReview, handleHelp }) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.appBar}>\n      <IconButton disabled={activeStep === 0} onClick={handleBack}>\n        <ExpandLessIcon />\n      </IconButton>\n      <Scroll to={`step-${activeStep}`} smooth=\"true\">\n        <IconButton\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleNext}\n        >\n          {\n            // If you're on the last step then display the CheckCircle instead of the ExpandMore\n            activeStep >= steps.length - 1\n              ? <CheckCircleIcon onClick={handleReview} />\n              : <ExpandMoreIcon />\n          }\n        </IconButton>\n      </Scroll>\n      {\n        // If you're at the end of your stepper then stop showing the help icon\n        activeStep <= steps.length - 1\n          ? <IconButton className={classes.infoButton} onClick={handleHelp}>\n              <InfoOutlinedIcon />\n            </IconButton>\n          : false\n      }\n    </div>\n  )\n}\n\nfunction StepperControl({ steps, activeStep, handleNext, stepperPath }) {\n  const classes = useStyles();\n  const [checked, setChecked] = useState(false);\n\n  useEffect(() => {\n    setChecked(true);\n  }, []);\n\n  return (\n    <Collapse appear in={checked} {\n      ... checked ? { timeout: 1000 } : {}\n    }>\n      <Stepper \n        id={`step-${activeStep}`} \n        activeStep={activeStep} \n        orientation=\"vertical\"\n      >\n        {\n          steps.map((label, index) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n              <StepContent>\n                <Typography>{stepperPath(index)}</Typography>\n                {\n                  // Stop showing the secondary ExpandMoreIcon if you've reached the Instructions step\n                  // Also, this ExpandMoreIcon should push data to the recipe object array\n                  index < steps.length - 1\n                    ? <IconButton color=\"primary\">\n                        <ExpandMoreIcon onClick={handleNext} fontSize=\"large\" />\n                      </IconButton>\n                    : false\n                }\n              </StepContent>\n            </Step>\n          ))\n        }\n      </Stepper>\n    </Collapse>\n  )\n}\n\nexport default function Wizard() {\n  const classes = useStyles();\n  const steps = ['Basic Information', 'Base Spirit', 'Ingredients', 'Instructions'];\n  const [activeStep, setActiveStep] = useState(0);\n  const [readyForReview, setReadyForReview] = useState(false);\n  const [recipeType, setRecipeType] = useState(false);\n  const [showHelp, setShowHelp] = useState(false);\n\n  const handleHelp = () => {\n    setShowHelp(!showHelp)\n  }\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1)\n  }\n\n  const handleNext = () => {\n    // This should also be pushing the entered data into the object\n    // This could get complicated. I'll need to give each input a unique ID so that if I backtrack I can have it update\n    // The unique item you'd want to change otherwise stuff could get messy\n    if (activeStep < steps.length) {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1)\n    } \n  }\n\n  const handleRecipeType = (event) => {\n    setRecipeType(event.target.value)\n  }\n\n  const handleReview = () => {\n    setReadyForReview(true)\n  }\n\n  return (\n    <main>\n      { \n        // Show help text if the InfoOutlinedIcon is clicked\n        //showHelp ? <Help step={activeStep} /> : false \n      }\n      <MainBar />\n      <RecipeType handleRecipeType={handleRecipeType} />\n      <NavAppBar\n        steps={steps} \n        activeStep={activeStep}\n        handleBack={handleBack}\n        handleNext={handleNext}\n        handleReview={handleReview}\n        handleHelp={handleHelp}\n      />\n      {\n        // Decide what Stepper type to show\n        !recipeType ? false : (\n          recipeType === 'cocktail'\n            ? <StepperControl\n                steps={steps}\n                activeStep={activeStep}\n                handleNext={handleNext}\n                stepperPath={renderCocktailSteps}\n              />\n            : <StepperControl\n                steps={steps}\n                activeStep={activeStep}\n                handleNext={handleNext}\n                stepperPath={renderNonCocktailSteps}\n              />\n        )\n      }\n      <div className={classes.buttonDiv}>\n      {\n        // Once all steps are completed then display the Review button\n        readyForReview && activeStep >= steps.length\n          ? <Button\n              className={classes.button}\n              variant=\"outlined\"\n              color=\"primary\"\n              href=\"/cocktail\"\n              onClick={() => console.log(\"Went to next\")}\n            >\n              Review\n            </Button>\n          : false\n      }\n      </div>\n    </main>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}