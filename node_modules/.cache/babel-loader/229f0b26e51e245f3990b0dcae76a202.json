{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Ingredients.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport MetricSelector from '../Components/MetricSelector';\nimport ImperialSelector from '../Components/ImperialSelector';\nimport spirits from '../static/spirits';\nimport { Container, TextField, Grid, FormControlLabel, Checkbox, IconButton, Switch, FormControl, Select, ListSubheader, MenuItem, Divider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nconst useStyles = makeStyles(theme => ({\n  formContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    padding: 20,\n    fontFamily: 'Nunito'\n  },\n  input: {\n    width: 900\n  },\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 120\n  },\n  nextItem: {\n    textAlign: 'center'\n  }\n}));\n\nfunction IngredientInput() {\n  _s();\n\n  const classes = useStyles();\n  const [isUnitIngredient, setIsUnitIngredient] = useState(true);\n  const unitTypes = [\"Imperial\", \"Metric\", \"Unit\"];\n  const [unitType, setUnitType] = useState('Imperial');\n\n  const handleIsUnitIngredient = () => {\n    setIsUnitIngredient(!isUnitIngredient);\n  };\n\n  const handeUnitType = event => {\n    setUnitType(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        variant: \"outlined\",\n        className: classes.formControl,\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          defaultValue: \"Spirit\",\n          id: \"ingredient-type\",\n          value: unitType,\n          onChange: handleUnitType,\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Imperial\",\n            children: \"Imperial\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Metric\",\n            children: \"Metric\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Unit\",\n            children: \"Unit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"ingredient\",\n        label: \"Ingredient\",\n        variant: \"outlined\",\n        margin: \"normal\",\n        InputProps: {\n          className: classes.input\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), unitType === \"Imperial\" || unitType === \"Metric\" ? /*#__PURE__*/_jsxDEV(FormControl, {\n        variant: \"outlined\",\n        className: classes.formControl,\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          defaultValue: \"\",\n          id: \"search-filter\",\n          children: [/*#__PURE__*/_jsxDEV(ListSubheader, {\n            children: \"Spirit Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 19\n          }, this), spirits.map((spirit, id) => {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: spirit,\n              children: spirit\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 30\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }, this) : false]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), isUnitIngredient ? unitType === \"Metric\" ? /*#__PURE__*/_jsxDEV(MetricSelector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(ImperialSelector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this) : false]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(IngredientInput, \"BkIGLg6h//2zIjs9mrLZ5ejovdU=\", false, function () {\n  return [useStyles];\n});\n\n_c = IngredientInput;\nexport default function Ingredients() {\n  _s2();\n\n  const classes = useStyles();\n  const newInput = {\n    'amount': '',\n    'name': '',\n    'unit': ''\n  };\n  const [inputs, setInputs] = useState([{ ...newInput\n  }]);\n\n  const addNewInput = () => {\n    setInputs([...inputs, { ...newInput\n    }]);\n    console.log(window.pageYOffset);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    className: classes.formContainer,\n    children: [inputs.map((input, id) => {\n      return /*#__PURE__*/_jsxDEV(IngredientInput, {}, `ingredient-${id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 18\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.nextItem,\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: addNewInput,\n        color: \"primary\",\n        children: /*#__PURE__*/_jsxDEV(AddBoxIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Ingredients, \"MtBeIJyNQE8Uw2FRK/jYkIgaj28=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = Ingredients;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IngredientInput\");\n$RefreshReg$(_c2, \"Ingredients\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Ingredients.js"],"names":["React","useState","MetricSelector","ImperialSelector","spirits","Container","TextField","Grid","FormControlLabel","Checkbox","IconButton","Switch","FormControl","Select","ListSubheader","MenuItem","Divider","makeStyles","AddBoxIcon","useStyles","theme","formContainer","display","flexDirection","backgroundColor","padding","fontFamily","input","width","formControl","margin","spacing","minWidth","nextItem","textAlign","IngredientInput","classes","isUnitIngredient","setIsUnitIngredient","unitTypes","unitType","setUnitType","handleIsUnitIngredient","handeUnitType","event","target","value","handleUnitType","className","map","spirit","id","Ingredients","newInput","inputs","setInputs","addNewInput","console","log","window","pageYOffset"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport MetricSelector from '../Components/MetricSelector';\nimport ImperialSelector from '../Components/ImperialSelector';\nimport spirits from '../static/spirits';\nimport {\n  Container,\n  TextField,\n  Grid,\n  FormControlLabel,\n  Checkbox,\n  IconButton,\n  Switch,\n  FormControl,\n  Select,\n  ListSubheader,\n  MenuItem,\n  Divider\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\n\nconst useStyles = makeStyles(theme => ({\n  formContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    padding: 20,\n    fontFamily: 'Nunito',\n  },\n  input: {\n    width: 900,\n  },\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 120,\n  },\n  nextItem: {\n    textAlign: 'center',\n  },\n}));\n\nfunction IngredientInput() {\n  const classes = useStyles();\n  const [isUnitIngredient, setIsUnitIngredient] = useState(true);\n  const unitTypes = [\"Imperial\", \"Metric\", \"Unit\"];\n  const [unitType, setUnitType] = useState('Imperial');\n\n  const handleIsUnitIngredient = () => {\n    setIsUnitIngredient(!isUnitIngredient)\n  }\n\n  const handeUnitType = (event) => {\n    setUnitType(event.target.value)\n  }\n\n  return (\n    <div>\n      <div>\n        <FormControl variant=\"outlined\" className={classes.formControl}>\n          <Select \n            defaultValue=\"Spirit\" \n            id=\"ingredient-type\"\n            value={unitType}\n            onChange={handleUnitType}\n          >\n            <MenuItem value=\"Imperial\">Imperial</MenuItem>\n            <MenuItem value=\"Metric\">Metric</MenuItem>\n            <MenuItem value=\"Unit\">Unit</MenuItem>\n          </Select>\n        </FormControl>\n        <TextField \n          id='ingredient'\n          label='Ingredient'\n          variant='outlined'\n          margin='normal'\n          InputProps={{\n            className: classes.input\n          }}\n        />\n        {\n          unitType === \"Imperial\" || unitType === \"Metric\"\n            ? <FormControl variant=\"outlined\" className={classes.formControl}>\n                <Select defaultValue=\"\" id=\"search-filter\">\n                  <ListSubheader>Spirit Type</ListSubheader>\n                  {\n                    spirits.map((spirit, id) => {\n                      return <MenuItem value={spirit}>{spirit}</MenuItem>\n                    })\n                  }\n                </Select>\n              </FormControl>\n            : false\n        }\n      </div>\n      {\n        isUnitIngredient \n          ? (\n            unitType === \"Metric\"\n              ? <MetricSelector />\n              : <ImperialSelector />\n          )\n          : false\n      }\n    </div>\n  );\n}\n\nexport default function Ingredients() {\n  const classes = useStyles();\n  const newInput = {\n    'amount': '',\n    'name': '',\n    'unit': '',\n  };\n  const [inputs, setInputs] = useState([{...newInput}]);\n\n  const addNewInput = () => {\n    setInputs([...inputs, {...newInput}])\n    console.log(window.pageYOffset)\n  }\n\n  return (\n    <Container maxWidth=\"lg\" className={classes.formContainer}>\n      {\n        inputs.map((input, id) => { \n          return <IngredientInput key={`ingredient-${id}`} />\n        })\n      }\n      <div className={classes.nextItem}>\n        <IconButton onClick={addNewInput} color=\"primary\">\n          <AddBoxIcon fontSize=\"large\"/>\n        </IconButton>\n      </div>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}