{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Ingredients.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport MetricSelector from '../Helpers/MetricSelector';\nimport ImperialSelector from '../Helpers/ImperialSelector';\nimport { Container, TextField, Grid, FormControlLabel, Checkbox, IconButton, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nconst useStyles = makeStyles(theme => ({\n  formContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    padding: 20,\n    fontFamily: 'Nunito'\n  },\n  input: {\n    width: 900\n  },\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 120\n  },\n  nextButton: {\n    width: 250,\n    marginTop: 20\n  }\n}));\nexport default function Ingredients() {\n  _s();\n\n  const classes = useStyles();\n  const [isMetric, setIsMetric] = useState(false);\n\n  const handleIsMetric = () => {\n    setIsMetric(!isMetric);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    className: classes.formContainer,\n    children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n        color: \"secondary\",\n        id: \"metric\",\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 18\n      }, this),\n      label: \"Metric\",\n      onChange: handleIsMetric\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: true,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"ingredient\",\n          label: \"Ingredient\",\n          variant: \"outlined\",\n          margin: \"normal\",\n          InputProps: {\n            className: classes.input\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xl: true,\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          color: \"primary\",\n          children: /*#__PURE__*/_jsxDEV(AddBoxIcon, {\n            fontSize: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), isMetric ? /*#__PURE__*/_jsxDEV(MetricSelector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(ImperialSelector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Ingredients, \"jf44rWN/94VJdkTdJsIHJfMRg60=\", false, function () {\n  return [useStyles];\n});\n\n_c = Ingredients;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ingredients\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Ingredients.js"],"names":["React","useState","MetricSelector","ImperialSelector","Container","TextField","Grid","FormControlLabel","Checkbox","IconButton","Button","makeStyles","AddBoxIcon","useStyles","theme","formContainer","display","flexDirection","backgroundColor","padding","fontFamily","input","width","formControl","margin","spacing","minWidth","nextButton","marginTop","Ingredients","classes","isMetric","setIsMetric","handleIsMetric","className"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport MetricSelector from '../Helpers/MetricSelector';\nimport ImperialSelector from '../Helpers/ImperialSelector';\nimport {\n  Container,\n  TextField,\n  Grid,\n  FormControlLabel,\n  Checkbox,\n  IconButton,\n  Button,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nconst useStyles = makeStyles(theme => ({\n  formContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    padding: 20,\n    fontFamily: 'Nunito',\n  },\n  input: {\n    width: 900,\n  },\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 120,\n  },\n  nextButton: {\n    width: 250,\n    marginTop: 20,\n  },\n}));\n\nexport default function Ingredients() {\n  const classes = useStyles();\n  const [isMetric, setIsMetric] = useState(false);\n\n  const handleIsMetric = () => {\n    setIsMetric(!isMetric)\n  }\n\n  return (\n    <Container maxWidth=\"lg\" className={classes.formContainer}>\n      <FormControlLabel\n        control={<Checkbox color=\"secondary\" id=\"metric\" size=\"small\" />}\n        label=\"Metric\"\n        onChange={handleIsMetric}\n      />\n      <Grid container alignItems=\"center\">\n        <Grid item xs>\n          <TextField \n            id='ingredient'\n            label='Ingredient'\n            variant='outlined'\n            margin='normal'\n            InputProps={{\n              className: classes.input\n            }}\n          />\n        </Grid>\n        <Grid item xl>\n          <IconButton color=\"primary\">\n            <AddBoxIcon fontSize=\"large\"/>\n          </IconButton>\n        </Grid>\n      </Grid>\n      {\n        isMetric\n          ? <MetricSelector />\n          : <ImperialSelector />\n      }\n      <Button\n        variant=\"outlined\"\n      >\n        Next\n      </Button>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}