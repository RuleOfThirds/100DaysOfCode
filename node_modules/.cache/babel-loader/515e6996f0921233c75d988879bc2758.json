{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/Providers/FirebaseProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useState, useEffect, useContext, createContext } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    backgroundColor: '#202020',\n    height: '100vh',\n    justifyContent: 'center'\n  }\n});\n/* \n * Auth API reference\n * https://firebase.google.com/docs/reference/js/firebase.auth.Auth\n */\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\nfirebase.initializeApp(firebaseConfig);\nconst FirebaseContext = /*#__PURE__*/createContext();\nexport const useFirebase = () => {\n  _s();\n\n  return useContext(FirebaseContext);\n};\n\n_s(useFirebase, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction useFirebaseProvider() {\n  _s2();\n\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const baseData = {\n    bio: '',\n    favorites: [],\n    followers: [],\n    following: [],\n    isVerified: false,\n    social: {\n      google: '',\n      instagram: '',\n      twitter: '',\n      website: ''\n    }\n  };\n  const googleAuth = new firebase.auth.GoogleAuthProvider(); //  const storageRef = firebase.storage().ref();\n\n  const signin = (email, password) => {\n    setLoading(true);\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(response => {\n      setUser(response.user);\n      return response.user;\n    }).catch(e => setError(e.message)).finally(() => {\n      setLoading(false);\n      setError(null);\n    });\n  };\n\n  const signup = data => {\n    setLoading(true);\n    return firebase.auth().createUserWithEmailAndPassword(data.email, data.password).then(response => {\n      firebase.firestore().collection(\"users\").doc(response.user.uid).set({ ...data,\n        ...baseData,\n        id: response.user.uid,\n        isAdmin: false\n      });\n    }).catch(e => setError(e.message)).finally(() => {\n      setError(null);\n      setLoading(false);\n    });\n  };\n\n  const signUpAsBusiness = data => {\n    setLoading(true);\n    return firebase.auth().createUserWithEmailAndPassword(data.email, data.password).then(response => {\n      firebase.firestore().collection(\"users\").doc(response.user.uid).set({ ...data,\n        ...baseData,\n        id: response.user.uid,\n        isAdmin: true\n      });\n    }).catch(e => setError(e.message)).finally(() => {\n      setError(null);\n      setLoading(false);\n    });\n  };\n\n  const signout = () => {\n    console.log(\"It's signing you out automatically\");\n    return firebase.auth().signOut().then(() => {\n      setUser(false);\n      setError(null);\n    });\n  };\n\n  const checkPasswordIntegrity = (password, confirm) => {\n    if (confirm !== password) {\n      setError(\"Passwords do not match\");\n    }\n\n    setLoading(false);\n  }; // So this is a simulation of how you would fetch a company account's users \n  // You could loop through all the items in the employees array and fetch them from firestore like below\n\n  /*\n  const getEmployees = (eid) => {\n    const userRef = firebase.firestore().collection(\"users\");\n    return userRef\n      .doc(eid)\n      .get()\n      .then((document) => {\n        return document.data()\n      }).catch((e) => console.log(e));\n  }\n  */\n\n\n  const updateUser = userData => {\n    const userRef = firebase.firestore().collection(\"users\");\n\n    if (user) {\n      return userRef.doc(user.id).update(userData).then(() => {\n        console.log(\"successfully updated user\");\n      }).catch(e => setError(e));\n    }\n  };\n  /*\n  const uploadImageToStorage = (image, name) => {\n  //    const imageRef = storageRef.child(`${user.id}/images/${name}`)\n    const imageRef = storageRef.child(name)\n     // This successfully updates the user's picture in Firestore. Now to just get it to display on Profile\n    imageRef\n      .put(image)\n      .then((snapshot) => {\n        imageRef.getDownloadURL().then((url) => {\n          updateUser({picture: url})\n        })\n      })\n      .catch((e) => setError(e))\n  }\n  */\n\n\n  const sendContactEmail = formData => {\n    const emailRef = firebase.firestore().collection(\"emails\");\n    return new Promise((resolve, reject) => {\n      emailRef.add({\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone || '',\n        message: formData.message,\n        time: new Date()\n      }).then(() => resolve(console.log(\"Successfully added email to database\"))).catch(e => {\n        reject(\"Failed to submit contact form. Perhaps you forgot to fill out a required input?\");\n      });\n    });\n  };\n\n  const sendPasswordResetEmail = email => {\n    return firebase.auth().sendPasswordResetEmail(email).then(() => true).catch(e => setError(e));\n  };\n\n  const confirmPasswordReset = (code, password) => {\n    return firebase.auth().confirmPasswordReset(code, password).then(() => true);\n  };\n\n  const signInWithGoogle = () => {\n    setLoading(true);\n    return firebase.auth().signInWithPopup(googleAuth).then(response => {\n      //const cred = response.credential;\n      //const token = cred.token;\n      setUser(response.user);\n      return response.user;\n    }).finally(() => setLoading(false));\n  };\n\n  useEffect(() => {\n    const userRef = firebase.firestore().collection(\"users\");\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        userRef.doc(user.uid).get().then(document => {\n          const userData = document.data();\n          setUser(userData);\n          setLoading(false);\n        });\n      } else {\n        setLoading(false);\n        setUser(false);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n  return {\n    user,\n    // the user object\n    error,\n    // the error message\n    loading,\n    // the loading boolean\n    signin,\n    signup,\n    signUpAsBusiness,\n    signout,\n    signInWithGoogle,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    updateUser,\n    sendContactEmail\n  };\n}\n\n_s2(useFirebaseProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n\nexport function FirebaseProvider({\n  children\n}) {\n  _s3();\n\n  const classes = useStyles();\n  const firebase = useFirebaseProvider();\n\n  if (firebase.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"secondary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(FirebaseContext.Provider, {\n    value: firebase,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(FirebaseProvider, \"VTSVNtX0TjwSeYwoYr1/Y1dntWs=\", false, function () {\n  return [useStyles, useFirebaseProvider];\n});\n\n_c = FirebaseProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseProvider\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/Providers/FirebaseProvider.js"],"names":["useState","useEffect","useContext","createContext","firebase","CircularProgress","makeStyles","useStyles","root","display","backgroundColor","height","justifyContent","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_APPID","measurementId","REACT_APP_MEASUREMENT_ID","initializeApp","FirebaseContext","useFirebase","useFirebaseProvider","user","setUser","loading","setLoading","error","setError","baseData","bio","favorites","followers","following","isVerified","social","google","instagram","twitter","website","googleAuth","auth","GoogleAuthProvider","signin","email","password","signInWithEmailAndPassword","then","response","catch","e","message","finally","signup","data","createUserWithEmailAndPassword","firestore","collection","doc","uid","set","id","isAdmin","signUpAsBusiness","signout","console","log","signOut","checkPasswordIntegrity","confirm","updateUser","userData","userRef","update","sendContactEmail","formData","emailRef","Promise","resolve","reject","add","name","phone","time","Date","sendPasswordResetEmail","confirmPasswordReset","code","signInWithGoogle","signInWithPopup","unsubscribe","onAuthStateChanged","get","document","FirebaseProvider","children","classes"],"mappings":"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","sourcesContent":["import { \n  useState, \n  useEffect,\n  useContext,\n  createContext \n} from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    backgroundColor: '#202020',\n    height: '100vh',\n    justifyContent: 'center',\n  },\n});\n\n/* \n * Auth API reference\n * https://firebase.google.com/docs/reference/js/firebase.auth.Auth\n */\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst FirebaseContext = createContext();\n\nexport const useFirebase = () => {\n  return useContext(FirebaseContext);\n}\n\nfunction useFirebaseProvider() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const baseData = {\n    bio: '',\n    favorites: [],\n    followers: [],\n    following: [],\n    isVerified: false,\n    social: {\n      google: '',\n      instagram: '',\n      twitter: '',\n      website: '',\n    },\n  };\n  const googleAuth = new firebase.auth.GoogleAuthProvider();\n//  const storageRef = firebase.storage().ref();\n\n  const signin = (email, password) => {\n    setLoading(true)\n\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(response => {\n        setUser(response.user)\n        return response.user;\n      })\n      .catch((e) => setError(e.message))\n      .finally(() => {\n        setLoading(false)\n        setError(null)\n      })\n  }\n\n  const signup = (data) => {\n    setLoading(true)\n\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(data.email, data.password)\n      .then(response => {\n        firebase.firestore().collection(\"users\")\n          .doc(response.user.uid)\n          .set({\n            ...data,\n            ...baseData,\n            id: response.user.uid,\n            isAdmin: false,\n          })\n      })\n      .catch((e) => setError(e.message))\n      .finally(() => {\n        setError(null);\n        setLoading(false);\n      });\n  }\n\n  const signUpAsBusiness = (data) => {\n    setLoading(true);\n\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(data.email, data.password)\n      .then(response => {\n        firebase.firestore().collection(\"users\")\n          .doc(response.user.uid)\n          .set({\n            ...data,\n            ...baseData,\n            id: response.user.uid,\n            isAdmin: true,\n          })\n      })\n      .catch((e) => setError(e.message))\n      .finally(() => {\n        setError(null);\n        setLoading(false);\n      });\n  }\n\n  const signout = () => {\n    console.log(\"It's signing you out automatically\");\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        setUser(false)\n        setError(null)\n      })\n  }\n\n  const checkPasswordIntegrity = (password, confirm) => {\n    if (confirm !== password) {\n      setError(\"Passwords do not match\")\n    }\n    setLoading(false);\n  }\n  \n  // So this is a simulation of how you would fetch a company account's users \n  // You could loop through all the items in the employees array and fetch them from firestore like below\n  /*\n  const getEmployees = (eid) => {\n    const userRef = firebase.firestore().collection(\"users\");\n    return userRef\n      .doc(eid)\n      .get()\n      .then((document) => {\n        return document.data()\n      }).catch((e) => console.log(e));\n  }\n  */\n\n  const updateUser = (userData) => {\n    const userRef = firebase.firestore().collection(\"users\");\n    if (user) {\n      return userRef\n        .doc(user.id)\n        .update(userData)\n        .then(() => {\n          console.log(\"successfully updated user\")\n        })\n        .catch((e) => setError(e))\n    }\n  }\n\n  /*\n  const uploadImageToStorage = (image, name) => {\n//    const imageRef = storageRef.child(`${user.id}/images/${name}`)\n    const imageRef = storageRef.child(name)\n\n    // This successfully updates the user's picture in Firestore. Now to just get it to display on Profile\n    imageRef\n      .put(image)\n      .then((snapshot) => {\n        imageRef.getDownloadURL().then((url) => {\n          updateUser({picture: url})\n        })\n      })\n      .catch((e) => setError(e))\n  }\n  */\n\n  const sendContactEmail = (formData) => {\n    const emailRef = firebase.firestore().collection(\"emails\");\n\n    return new Promise((resolve, reject) => {\n      emailRef.add({\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone || '',\n        message: formData.message,\n        time: new Date(),\n      })\n      .then(() => resolve(console.log(\"Successfully added email to database\")))\n      .catch((e) => {\n        reject(\"Failed to submit contact form. Perhaps you forgot to fill out a required input?\")\n      })\n    })\n  }\n\n  const sendPasswordResetEmail = (email) => {\n    return firebase\n      .auth()\n      .sendPasswordResetEmail(email)\n      .then(() => true)\n      .catch((e) => setError(e))\n  }\n\n  const confirmPasswordReset = (code, password) => {\n    return firebase\n      .auth()\n      .confirmPasswordReset(code, password)\n      .then(() => true)\n  }\n\n  const signInWithGoogle = () => {\n    setLoading(true);\n\n    return firebase\n      .auth()\n      .signInWithPopup(googleAuth)\n      .then((response) => {\n        //const cred = response.credential;\n        //const token = cred.token;\n        setUser(response.user)\n        return response.user;\n      })\n      .finally(() => setLoading(false));\n  }\n\n  useEffect(() => {\n    const userRef = firebase.firestore().collection(\"users\");\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        userRef\n          .doc(user.uid)\n          .get()\n          .then((document) => {\n            const userData = document.data()\n            setUser(userData)\n            setLoading(false)\n          })\n      } else {\n        setLoading(false)\n        setUser(false)\n      }\n    })\n\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user,     // the user object\n    error,    // the error message\n    loading,  // the loading boolean\n    signin, \n    signup,\n    signUpAsBusiness,\n    signout,\n    signInWithGoogle,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    updateUser,\n    sendContactEmail,\n  };\n}\n\nexport function FirebaseProvider({ children }) {\n  const classes = useStyles();\n  const firebase = useFirebaseProvider();\n\n  if (firebase.loading) {\n    return (\n      <div className={classes.root}>\n        <CircularProgress color=\"secondary\" />\n      </div>\n    )\n  }\n\n  return (\n    <FirebaseContext.Provider value={firebase}>\n      {children}\n    </FirebaseContext.Provider>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}