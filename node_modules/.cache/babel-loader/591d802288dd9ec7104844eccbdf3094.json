{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/Providers/FirebaseProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useState, useEffect, useContext, createContext } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    backgroundColor: '#202020',\n    height: '100vh',\n    justifyContent: 'center'\n  }\n});\n/* \n * Auth API reference\n * https://firebase.google.com/docs/reference/js/firebase.auth.Auth\n */\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\nfirebase.initializeApp(firebaseConfig);\nconst FirebaseContext = /*#__PURE__*/createContext();\nexport const useFirebase = () => {\n  _s();\n\n  return useContext(FirebaseContext);\n};\n\n_s(useFirebase, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction useFirebaseProvider() {\n  _s2();\n\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  /*\n  const signup = (data) => {\n    setLoading(true)\n     return firebase\n      .auth()\n      .createUserWithEmailAndPassword(data.email, data.password)\n      .then(response => {\n        delete(data.password);\n        delete(data.confirm);\n         firebase.firestore().collection(\"users\")\n          .doc(response.user.uid)\n          .set({\n            ...data,\n            ...baseData,\n            id: response.user.uid,\n            isAdmin: false,\n          })\n      })\n      .catch((e) => setError(e.message))\n      .finally(() => {\n        setError(null);\n        setLoading(false);\n        verifyUserEmail();\n      });\n  }\n  */\n\n  const addUserToFirestore = (id, user, isAdmin) => {\n    console.log(\"user: \", user); //    firebase.firestore().collection(\"users\")\n    //      .doc(user.uid)\n    //      .set({\n\n    console.log({\n      accountType: user.accountType,\n      bio: '',\n      company: user.company || '',\n      email: user.email,\n      favorites: [],\n      followers: [],\n      following: [],\n      google: '',\n      id: id,\n      instagram: '',\n      isAdmin: isAdmin,\n      isCertified: false,\n      name: user.name,\n      phone: user.phone,\n      twitter: '',\n      website: ''\n    }); //      })\n  };\n  /*\n  const signUpAsBusiness = (data) => {\n    setLoading(true);\n     return firebase\n      .auth()\n      .createUserWithEmailAndPassword(data.email, data.password)\n      .then(response => {\n        delete(data.password);\n        delete(data.confirm);\n         firebase.firestore().collection(\"users\")\n          .doc(response.user.uid)\n          .set({\n            ...data,\n            ...baseData,\n            id: response.user.uid,\n            isAdmin: true,\n          })\n      })\n      .catch((e) => setError(e.message))\n      .finally(() => {\n        setError(null);\n        setLoading(false);\n      });\n  }\n  */\n\n\n  const setCurrentUser = user => setUser(user); // send a verification email\n\n\n  const verifyUserEmail = () => {\n    const user = firebase.auth().currentUser;\n    user.sendEmailVerification().then(() => console.log(\"Email sent successfully\"));\n  }; // Compare the password and confirm password fields\n\n\n  const checkPasswordIntegrity = (password, confirm) => {\n    if (confirm !== password) {\n      setError(\"Passwords do not match\");\n    }\n\n    setLoading(false);\n  };\n\n  const checkIsEmailVerified = () => {\n    return firebase.auth().currentUser.emailVerified ? true : false;\n  };\n\n  const isAlreadyLoggedIn = () => {\n    return firebase.auth().currentUser ? true : false;\n  };\n\n  const updateUser = userData => {\n    const userRef = firebase.firestore().collection(\"users\");\n\n    if (user) {\n      userRef.doc(user.id).update(userData).then(() => console.log(\"successfully updated user\"));\n    }\n  };\n\n  const uploadImageToStorage = image => {\n    const imageRef = firebase.storage().ref().child(`${user.id}/images/${image.name}`);\n    return imageRef.put(image).then(snapshot => {\n      if (snapshot.state === 'success') {\n        return imageRef.getDownloadURL();\n      } else {\n        setError(\"Upload error: \", snapshot.state);\n      }\n    });\n  };\n\n  const sendContactEmail = formData => {\n    const emailRef = firebase.firestore().collection(\"emails\");\n    return new Promise((resolve, reject) => {\n      emailRef.add({\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone || '',\n        message: formData.message,\n        time: new Date()\n      }).then(() => resolve(console.log(\"Successfully added email to database\"))).catch(e => {\n        reject(\"Failed to submit contact form. Perhaps you forgot to fill out a required input?\");\n      });\n    });\n  };\n\n  const sendPasswordResetEmail = email => {\n    firebase.auth().sendPasswordResetEmail(email);\n  };\n\n  const confirmPasswordReset = (code, password) => {\n    firebase.auth().confirmPasswordReset(code, password);\n  };\n\n  useEffect(() => {\n    const userRef = firebase.firestore().collection(\"users\");\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        userRef.doc(user.uid).get().then(document => {\n          const userData = document.data();\n          setUser(userData);\n          setLoading(false);\n        });\n      } else {\n        setLoading(false);\n        setUser(false);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n  return {\n    user,\n    updateUser,\n    addUserToFirestore,\n    loading,\n    setCurrentUser,\n    isAlreadyLoggedIn,\n    uploadImageToStorage,\n    checkPasswordIntegrity,\n    checkIsEmailVerified,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    sendContactEmail\n  };\n}\n\n_s2(useFirebaseProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n\nexport function FirebaseProvider({\n  children\n}) {\n  _s3();\n\n  const classes = useStyles();\n  const firebase = useFirebaseProvider();\n\n  if (firebase.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"secondary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(FirebaseContext.Provider, {\n    value: firebase,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(FirebaseProvider, \"VTSVNtX0TjwSeYwoYr1/Y1dntWs=\", false, function () {\n  return [useStyles, useFirebaseProvider];\n});\n\n_c = FirebaseProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseProvider\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/Providers/FirebaseProvider.js"],"names":["useState","useEffect","useContext","createContext","firebase","CircularProgress","makeStyles","useStyles","root","display","backgroundColor","height","justifyContent","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_APPID","measurementId","REACT_APP_MEASUREMENT_ID","initializeApp","FirebaseContext","useFirebase","useFirebaseProvider","user","setUser","loading","setLoading","error","setError","addUserToFirestore","id","isAdmin","console","log","accountType","bio","company","email","favorites","followers","following","google","instagram","isCertified","name","phone","twitter","website","setCurrentUser","verifyUserEmail","auth","currentUser","sendEmailVerification","then","checkPasswordIntegrity","password","confirm","checkIsEmailVerified","emailVerified","isAlreadyLoggedIn","updateUser","userData","userRef","firestore","collection","doc","update","uploadImageToStorage","image","imageRef","storage","ref","child","put","snapshot","state","getDownloadURL","sendContactEmail","formData","emailRef","Promise","resolve","reject","add","message","time","Date","catch","e","sendPasswordResetEmail","confirmPasswordReset","code","unsubscribe","onAuthStateChanged","uid","get","document","data","FirebaseProvider","children","classes"],"mappings":"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","sourcesContent":["import { \n  useState, \n  useEffect,\n  useContext,\n  createContext \n} from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    backgroundColor: '#202020',\n    height: '100vh',\n    justifyContent: 'center',\n  },\n});\n\n/* \n * Auth API reference\n * https://firebase.google.com/docs/reference/js/firebase.auth.Auth\n */\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst FirebaseContext = createContext();\n\nexport const useFirebase = () => {\n  return useContext(FirebaseContext);\n}\n\nfunction useFirebaseProvider() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  /*\n  const signup = (data) => {\n    setLoading(true)\n\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(data.email, data.password)\n      .then(response => {\n        delete(data.password);\n        delete(data.confirm);\n\n        firebase.firestore().collection(\"users\")\n          .doc(response.user.uid)\n          .set({\n            ...data,\n            ...baseData,\n            id: response.user.uid,\n            isAdmin: false,\n          })\n      })\n      .catch((e) => setError(e.message))\n      .finally(() => {\n        setError(null);\n        setLoading(false);\n        verifyUserEmail();\n      });\n  }\n  */\n\n  const addUserToFirestore = (id, user, isAdmin) => {\n    console.log(\"user: \", user);\n//    firebase.firestore().collection(\"users\")\n//      .doc(user.uid)\n//      .set({\n    console.log({\n        accountType: user.accountType,\n        bio: '',\n        company: user.company || '',\n        email: user.email,\n        favorites: [],\n        followers: [],\n        following: [],\n        google: '',\n        id: id,\n        instagram: '',\n        isAdmin: isAdmin,\n        isCertified: false,\n        name: user.name,\n        phone: user.phone,\n        twitter: '',\n        website: ''\n    })\n//      })\n  }\n\n  /*\n  const signUpAsBusiness = (data) => {\n    setLoading(true);\n\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(data.email, data.password)\n      .then(response => {\n        delete(data.password);\n        delete(data.confirm);\n\n        firebase.firestore().collection(\"users\")\n          .doc(response.user.uid)\n          .set({\n            ...data,\n            ...baseData,\n            id: response.user.uid,\n            isAdmin: true,\n          })\n      })\n      .catch((e) => setError(e.message))\n      .finally(() => {\n        setError(null);\n        setLoading(false);\n      });\n  }\n  */\n\n  const setCurrentUser = (user) => setUser(user)\n\n  // send a verification email\n  const verifyUserEmail = () => {\n    const user = firebase.auth().currentUser;\n\n    user.sendEmailVerification().then(() => console.log(\"Email sent successfully\"));\n  }\n\n  // Compare the password and confirm password fields\n  const checkPasswordIntegrity = (password, confirm) => {\n    if (confirm !== password) {\n      setError(\"Passwords do not match\")\n    }\n    setLoading(false);\n  }\n\n  const checkIsEmailVerified = () => {\n    return firebase.auth().currentUser.emailVerified ? true : false\n  }\n\n  const isAlreadyLoggedIn = () => {\n    return firebase.auth().currentUser ? true : false\n  }\n  \n  const updateUser = (userData) => {\n    const userRef = firebase.firestore().collection(\"users\");\n\n    if (user) {\n      userRef\n        .doc(user.id)\n        .update(userData)\n        .then(() => console.log(\"successfully updated user\"));\n    }\n  }\n\n  const uploadImageToStorage = (image) => {\n    const imageRef = firebase.storage().ref().child(`${user.id}/images/${image.name}`)\n\n    return imageRef\n      .put(image)\n      .then((snapshot) => {\n        if (snapshot.state === 'success') {\n          return imageRef.getDownloadURL();\n        } else {\n          setError(\"Upload error: \", snapshot.state);\n        }\n      })\n  }\n\n  const sendContactEmail = (formData) => {\n    const emailRef = firebase.firestore().collection(\"emails\");\n\n    return new Promise((resolve, reject) => {\n      emailRef.add({\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone || '',\n        message: formData.message,\n        time: new Date(),\n      })\n      .then(() => resolve(console.log(\"Successfully added email to database\")))\n      .catch((e) => {\n        reject(\"Failed to submit contact form. Perhaps you forgot to fill out a required input?\")\n      })\n    })\n  }\n\n  const sendPasswordResetEmail = (email) => {\n    firebase.auth().sendPasswordResetEmail(email)\n  }\n\n  const confirmPasswordReset = (code, password) => {\n    firebase.auth().confirmPasswordReset(code, password)\n  }\n\n  useEffect(() => {\n    const userRef = firebase.firestore().collection(\"users\");\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        userRef\n          .doc(user.uid)\n          .get()\n          .then((document) => {\n            const userData = document.data()\n            setUser(userData)\n            setLoading(false)\n          })\n      } else {\n        setLoading(false)\n        setUser(false)\n      }\n    })\n\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user,\n    updateUser,\n    addUserToFirestore,\n    loading,\n    setCurrentUser,\n    isAlreadyLoggedIn,\n    uploadImageToStorage,\n    checkPasswordIntegrity,\n    checkIsEmailVerified,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    sendContactEmail,\n  };\n}\n\nexport function FirebaseProvider({ children }) {\n  const classes = useStyles();\n  const firebase = useFirebaseProvider();\n\n  if (firebase.loading) {\n    return (\n      <div className={classes.root}>\n        <CircularProgress color=\"secondary\" />\n      </div>\n    )\n  }\n\n  return (\n    <FirebaseContext.Provider value={firebase}>\n      {children}\n    </FirebaseContext.Provider>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}