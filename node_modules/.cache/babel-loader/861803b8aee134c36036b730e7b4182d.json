{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"/home/dj/Development/ThirdsMedia/100DaysOfCode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import MetricSelector from'../Helpers/MetricSelector';import ImperialSelector from'../Helpers/ImperialSelector';import{Container,TextField,Grid,FormControlLabel,Checkbox,IconButton}from'@material-ui/core';import{makeStyles}from'@material-ui/core/styles';import AddBoxIcon from'@material-ui/icons/AddBox';var useStyles=makeStyles(function(theme){return{formContainer:{display:'flex',flexDirection:'column',backgroundColor:'rgba(0,0,0,0.3)',padding:20,fontFamily:'Nunito'},input:{width:900},formControl:{margin:theme.spacing(2),minWidth:120}};});export default function Ingredients(){var classes=useStyles();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isMetric=_useState2[0],setIsMetric=_useState2[1];var handleIsMetric=function handleIsMetric(){setIsMetric(!isMetric);};return/*#__PURE__*/_jsxs(Container,{maxWidth:\"lg\",className:classes.formContainer,children:[/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{color:\"secondary\",id:\"metric\",size:\"small\"}),label:\"Metric\",onChange:handleIsMetric}),/*#__PURE__*/_jsxs(Grid,{container:true,alignItems:\"center\",children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:true,children:/*#__PURE__*/_jsx(TextField,{id:\"ingredient\",label:\"Ingredient\",variant:\"outlined\",margin:\"normal\",InputProps:{className:classes.input}})}),/*#__PURE__*/_jsx(Grid,{item:true,xl:true,children:/*#__PURE__*/_jsx(IconButton,{color:\"primary\",children:/*#__PURE__*/_jsx(AddBoxIcon,{fontSize:\"large\"})})})]}),isMetric?/*#__PURE__*/_jsx(MetricSelector,{}):/*#__PURE__*/_jsx(ImperialSelector,{})]});}","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Ingredients.js"],"names":["React","useState","MetricSelector","ImperialSelector","Container","TextField","Grid","FormControlLabel","Checkbox","IconButton","makeStyles","AddBoxIcon","useStyles","theme","formContainer","display","flexDirection","backgroundColor","padding","fontFamily","input","width","formControl","margin","spacing","minWidth","Ingredients","classes","isMetric","setIsMetric","handleIsMetric","className"],"mappings":"6PAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,cAAP,KAA2B,2BAA3B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,6BAA7B,CACA,OACEC,SADF,CAEEC,SAFF,CAGEC,IAHF,CAIEC,gBAJF,CAKEC,QALF,CAMEC,UANF,KAOO,mBAPP,CAQA,OAASC,UAAT,KAA2B,0BAA3B,CACA,MAAOC,CAAAA,UAAP,KAAuB,2BAAvB,CAEA,GAAMC,CAAAA,SAAS,CAAGF,UAAU,CAAC,SAAAG,KAAK,QAAK,CACrCC,aAAa,CAAE,CACbC,OAAO,CAAE,MADI,CAEbC,aAAa,CAAE,QAFF,CAGbC,eAAe,CAAE,iBAHJ,CAIbC,OAAO,CAAE,EAJI,CAKbC,UAAU,CAAE,QALC,CADsB,CAQrCC,KAAK,CAAE,CACLC,KAAK,CAAE,GADF,CAR8B,CAWrCC,WAAW,CAAE,CACXC,MAAM,CAAEV,KAAK,CAACW,OAAN,CAAc,CAAd,CADG,CAEXC,QAAQ,CAAE,GAFC,CAXwB,CAAL,EAAN,CAA5B,CAiBA,cAAe,SAASC,CAAAA,WAAT,EAAuB,CACpC,GAAMC,CAAAA,OAAO,CAAGf,SAAS,EAAzB,CADoC,cAEJX,QAAQ,CAAC,KAAD,CAFJ,wCAE7B2B,QAF6B,eAEnBC,WAFmB,eAIpC,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3BD,WAAW,CAAC,CAACD,QAAF,CAAX,CACD,CAFD,CAIA,mBACE,MAAC,SAAD,EAAW,QAAQ,CAAC,IAApB,CAAyB,SAAS,CAAED,OAAO,CAACb,aAA5C,wBACE,KAAC,gBAAD,EACE,OAAO,cAAE,KAAC,QAAD,EAAU,KAAK,CAAC,WAAhB,CAA4B,EAAE,CAAC,QAA/B,CAAwC,IAAI,CAAC,OAA7C,EADX,CAEE,KAAK,CAAC,QAFR,CAGE,QAAQ,CAAEgB,cAHZ,EADF,cAME,MAAC,IAAD,EAAM,SAAS,KAAf,CAAgB,UAAU,CAAC,QAA3B,wBACE,KAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,KAAb,uBACE,KAAC,SAAD,EACE,EAAE,CAAC,YADL,CAEE,KAAK,CAAC,YAFR,CAGE,OAAO,CAAC,UAHV,CAIE,MAAM,CAAC,QAJT,CAKE,UAAU,CAAE,CACVC,SAAS,CAAEJ,OAAO,CAACP,KADT,CALd,EADF,EADF,cAYE,KAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,KAAb,uBACE,KAAC,UAAD,EAAY,KAAK,CAAC,SAAlB,uBACE,KAAC,UAAD,EAAY,QAAQ,CAAC,OAArB,EADF,EADF,EAZF,GANF,CAyBIQ,QAAQ,cACJ,KAAC,cAAD,IADI,cAEJ,KAAC,gBAAD,IA3BR,GADF,CAgCD","sourcesContent":["import React, { useState } from 'react';\nimport MetricSelector from '../Helpers/MetricSelector';\nimport ImperialSelector from '../Helpers/ImperialSelector';\nimport {\n  Container,\n  TextField,\n  Grid,\n  FormControlLabel,\n  Checkbox,\n  IconButton,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\n\nconst useStyles = makeStyles(theme => ({\n  formContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    padding: 20,\n    fontFamily: 'Nunito',\n  },\n  input: {\n    width: 900,\n  },\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 120,\n  },\n}));\n\nexport default function Ingredients() {\n  const classes = useStyles();\n  const [isMetric, setIsMetric] = useState(false);\n\n  const handleIsMetric = () => {\n    setIsMetric(!isMetric)\n  }\n\n  return (\n    <Container maxWidth=\"lg\" className={classes.formContainer}>\n      <FormControlLabel\n        control={<Checkbox color=\"secondary\" id=\"metric\" size=\"small\" />}\n        label=\"Metric\"\n        onChange={handleIsMetric}\n      />\n      <Grid container alignItems=\"center\">\n        <Grid item xs>\n          <TextField \n            id='ingredient'\n            label='Ingredient'\n            variant='outlined'\n            margin='normal'\n            InputProps={{\n              className: classes.input\n            }}\n          />\n        </Grid>\n        <Grid item xl>\n          <IconButton color=\"primary\">\n            <AddBoxIcon fontSize=\"large\"/>\n          </IconButton>\n        </Grid>\n      </Grid>\n      {\n        isMetric\n          ? <MetricSelector />\n          : <ImperialSelector />\n      }\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}