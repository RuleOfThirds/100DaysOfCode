{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/Auth/ForgotPassword.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport MainBar from '../Components/MainBar';\nimport { Container, Typography, TextField, Button, Grid, Stepper, Step, StepLabel, StepContent, FormControl, FormControlLabel, Radio, RadioGroup } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(6),\n    textAlign: 'center'\n  },\n  textField: {\n    borderRadius: 37\n  },\n  submitButton: {\n    color: 'white',\n    marginTop: theme.spacing(1),\n    fontWeight: 'bold',\n    borderRadius: 50,\n    backgroundColor: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.main\n    }\n  }\n}));\nconst steps = [\"Enter your email\", \"Reset password\", \"Enter code\"];\n\nfunction renderStep(step, props) {\n  switch (step) {\n    case 0:\n      return /*#__PURE__*/_jsxDEV(EnterEmail, {\n        props: props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }, this);\n\n    case 1:\n      return /*#__PURE__*/_jsxDEV(TextCode, {\n        props: props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }, this);\n\n    case 2:\n      return /*#__PURE__*/_jsxDEV(Verify, {\n        props: props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }, this);\n\n    default:\n      return false;\n  }\n}\n\nfunction EnterEmail({\n  handleNext\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [email, setEmail] = useState('');\n  const [isEmailValid, setIsEmailValid] = useState(false);\n  /*\n   * This would pull data from a database based on the email passed to the form\n   * If it doesn't exist, render red error text instead\n   */\n\n  const searchForUserEmail = () => {\n    // perform lookup in database\n    // if found then...\n    setIsEmailValid(true); // otherwise leave it false and display error\n  };\n\n  console.log(\"Email: \", email);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.root,\n    component: \"main\",\n    maxWidth: \"sm\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle2\",\n      color: \"textSecondary\",\n      children: \"Enter the email associated with your account.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"email\",\n      label: \"Email\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      variant: \"outlined\",\n      onInput: e => setEmail(e.target.value),\n      InputProps: {\n        className: classes.textField\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.submitButton,\n      type: \"submit\",\n      color: \"primary\",\n      fullWidth: true,\n      variant: \"contained\",\n      onClick: handleNext,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EnterEmail, \"5tapBKykipSGZua9KWvK+WrxH/Y=\", false, function () {\n  return [useStyles];\n});\n\n_c = EnterEmail;\n\nfunction TextCode({\n  props\n}) {\n  _s2();\n\n  const classes = useStyles();\n  const [value, setValue] = useState('phone');\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  };\n  /*\n   * this component would need to pull user data from database using the email previously passed\n   * and then send a randomly generated code to either the phone (via text, or the email)\n   * But for starters, it could just be email\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      justify: \"center\",\n      alignItems: \"center\",\n      container: true,\n      spacing: \"3\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"subtitle2\",\n          color: \"textSecondary\",\n          children: \"How would you like to receive your code?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          component: \"fieldset\",\n          children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n            \"aria-label\": \"method\",\n            name: \"method\",\n            value: value,\n            onChange: handleChange,\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"phone\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 56\n              }, this),\n              label: \"Phone number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"email\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 56\n              }, this),\n              label: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.submitButton,\n      type: \"submit\",\n      color: \"primary\",\n      fullWidth: true,\n      variant: \"contained\",\n      onClick: props,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(TextCode, \"L1ERl0DSg5uPWJB7hp34Y9zxocE=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = TextCode;\n\nfunction Verify({\n  props\n}) {\n  _s3();\n\n  const classes = useStyles();\n  /* \n   * Add logic to render red error text if the code was wrong\n   * Or go to next if correct\n   */\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.root,\n    component: \"main\",\n    maxWidth: \"sm\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle2\",\n      color: \"textSecondary\",\n      children: \"Enter the code you received\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"code\",\n      label: \"Code\",\n      margin: \"normal\",\n      required: true,\n      fullWidth: true,\n      variant: \"outlined\",\n      InputProps: {\n        className: classes.textField\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.submitButton,\n      type: \"submit\",\n      color: \"primary\",\n      fullWidth: true,\n      variant: \"contained\",\n      onClick: props,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(Verify, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c3 = Verify;\nexport default function ForgotPassword() {\n  _s4();\n\n  const [activeStep, setActiveStep] = useState(0);\n\n  const handleNext = () => {\n    if (activeStep < steps.length) {\n      setActiveStep(prevActiveStep => prevActiveStep + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MainBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stepper, {\n      activeStep: activeStep,\n      orientation: \"vertical\",\n      children: steps.map((label, index) => /*#__PURE__*/_jsxDEV(Step, {\n        children: [/*#__PURE__*/_jsxDEV(StepLabel, {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(StepContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: renderStep(index, handleNext)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 15\n        }, this)]\n      }, label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(ForgotPassword, \"cJXWosTT0XUh3gGn3cCcv/Y+Hws=\");\n\n_c4 = ForgotPassword;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"EnterEmail\");\n$RefreshReg$(_c2, \"TextCode\");\n$RefreshReg$(_c3, \"Verify\");\n$RefreshReg$(_c4, \"ForgotPassword\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/Auth/ForgotPassword.js"],"names":["React","useState","MainBar","Container","Typography","TextField","Button","Grid","Stepper","Step","StepLabel","StepContent","FormControl","FormControlLabel","Radio","RadioGroup","makeStyles","useStyles","theme","root","marginTop","spacing","textAlign","textField","borderRadius","submitButton","color","fontWeight","backgroundColor","palette","primary","main","steps","renderStep","step","props","EnterEmail","handleNext","classes","email","setEmail","isEmailValid","setIsEmailValid","searchForUserEmail","console","log","e","target","value","className","TextCode","setValue","handleChange","event","Verify","ForgotPassword","activeStep","setActiveStep","length","prevActiveStep","map","label","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport MainBar from '../Components/MainBar';\nimport {\n  Container,\n  Typography,\n  TextField,\n  Button,\n  Grid,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  FormControl,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(6),\n    textAlign: 'center'\n  },\n  textField: {\n    borderRadius: 37,\n  },\n  submitButton: {\n    color: 'white',\n    marginTop: theme.spacing(1),\n    fontWeight: 'bold',\n    borderRadius: 50,\n    backgroundColor: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.main,\n    },\n  },\n}))\n\nconst steps = [\"Enter your email\", \"Reset password\", \"Enter code\"];\n\nfunction renderStep(step, props) {\n  switch(step) {\n    case 0:\n      return <EnterEmail props={props} />\n    case 1:\n      return <TextCode props={props} />\n    case 2:\n      return <Verify props={props} />\n    default:\n      return false\n  }\n}\n\nfunction EnterEmail({ handleNext }) {\n  const classes = useStyles();\n  const [email, setEmail] = useState('');\n  const [isEmailValid, setIsEmailValid] = useState(false);\n\n  /*\n   * This would pull data from a database based on the email passed to the form\n   * If it doesn't exist, render red error text instead\n   */\n  const searchForUserEmail = () => {\n    // perform lookup in database\n    // if found then...\n    setIsEmailValid(true)\n    // otherwise leave it false and display error\n  }\n\n  console.log(\"Email: \", email)\n\n  return (\n    <Container className={classes.root} component=\"main\" maxWidth=\"sm\">\n      <Typography variant=\"subtitle2\" color=\"textSecondary\">\n        Enter the email associated with your account.\n      </Typography>\n      <TextField\n        id=\"email\"\n        label=\"Email\"\n        margin=\"normal\"\n        required\n        fullWidth\n        variant=\"outlined\"\n        onInput={ e => setEmail(e.target.value)}\n        InputProps={{\n          className: classes.textField\n        }}\n      />\n      <Button \n        className={classes.submitButton}\n        type=\"submit\"\n        color=\"primary\"\n        fullWidth\n        variant=\"contained\"\n        onClick={handleNext}\n      >\n        Search\n      </Button>\n    </Container>\n  );\n}\n\nfunction TextCode({ props }) {\n  const classes = useStyles();\n  const [value, setValue] = useState('phone');\n\n  const handleChange = (event) => {\n    setValue(event.target.value)\n  }\n\n  /*\n   * this component would need to pull user data from database using the email previously passed\n   * and then send a randomly generated code to either the phone (via text, or the email)\n   * But for starters, it could just be email\n   */\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Grid justify='center' alignItems='center' container spacing='3'>\n        <Grid item>\n          <Typography variant=\"subtitle2\" color=\"textSecondary\">\n            How would you like to receive your code?\n          </Typography>\n        </Grid>\n        <Grid item>\n          <FormControl component=\"fieldset\">\n            <RadioGroup aria-label=\"method\" name=\"method\" value={value} onChange={handleChange}>\n              <FormControlLabel value=\"phone\" control={<Radio />} label=\"Phone number\" />\n              <FormControlLabel value=\"email\" control={<Radio />} label=\"Email\" />\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n      </Grid>\n      <Button \n        className={classes.submitButton}\n        type=\"submit\"\n        color=\"primary\"\n        fullWidth\n        variant=\"contained\"\n        onClick={props}\n      >\n        Next\n      </Button>\n    </Container>\n  );\n}\n\nfunction Verify({ props }) {\n  const classes = useStyles();\n\n  /* \n   * Add logic to render red error text if the code was wrong\n   * Or go to next if correct\n   */\n\n  return (\n    <Container className={classes.root} component=\"main\" maxWidth=\"sm\">\n      <Typography variant=\"subtitle2\" color=\"textSecondary\">\n        Enter the code you received\n      </Typography>\n      <TextField\n        id=\"code\"\n        label=\"Code\"\n        margin=\"normal\"\n        required\n        fullWidth\n        variant=\"outlined\"\n        InputProps={{\n          className: classes.textField\n        }}\n      />\n      <Button \n        className={classes.submitButton}\n        type=\"submit\"\n        color=\"primary\"\n        fullWidth\n        variant=\"contained\"\n        onClick={props}\n      >\n        Submit\n      </Button>\n    </Container>\n  );\n}\n\nexport default function ForgotPassword() {\n  const [activeStep, setActiveStep] = useState(0);\n\n  const handleNext = () => {\n    if (activeStep < steps.length) {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1)\n    } \n  }\n\n  return (\n    <div>\n      <MainBar />\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        {\n          steps.map((label, index) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n              <StepContent>\n                <Typography>{renderStep(index, handleNext)}</Typography>\n              </StepContent>\n            </Step>\n          ))\n        }\n      </Stepper>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}