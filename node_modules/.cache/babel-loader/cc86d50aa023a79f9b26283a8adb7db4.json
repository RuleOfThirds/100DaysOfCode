{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/FirebaseAuthProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useState, useEffect, useContext, createContext } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n/* \n * Auth API reference\n * https://firebase.google.com/docs/reference/js/firebase.auth.Auth\n */\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\nfirebase.initializeApp(firebaseConfig);\nconst UserContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n\n  return useContext(UserContext);\n};\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction useProvideAuth() {\n  _s2();\n\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const googleAuth = new firebase.auth.GoogleAuthProvider();\n\n  const signin = (email, password) => {\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(response => {\n      setUser(response.user);\n      return response.user;\n    }).catch(e => setError(e));\n  };\n\n  const signup = (displayName, phone, email, password) => {\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then(response => {\n      const uid = response.user.uid;\n      const initData = {\n        id: uid,\n        email,\n        displayName,\n        phone,\n        bio: '',\n        twitter: '',\n        instagram: '',\n        website: '',\n        picture: '',\n        favorites: []\n      }; // finish creating the full user object\n\n      const data = Object.assign({}, initData); // User was already added to the Auth database, now add it to firestore\n\n      const userRef = firebase.firestore().collection(\"users\");\n      userRef.doc(uid).set(data).then(() => {\n        setUser(response.user);\n      }).catch(e => setError(e));\n      return response.user;\n    });\n  };\n\n  const signout = () => {\n    return firebase.auth().signOut().then(() => {\n      setUser(false);\n    }).catch(e => setError(e));\n  };\n\n  const updateUser = userData => {\n    const userRef = firebase.firestore().collection(\"users\");\n\n    if (user) {\n      userRef.doc(user.id).update(userData).then(() => {\n        console.log(\"From provider after update: \", user);\n      }).catch(e => setError(e.message));\n    }\n  };\n\n  const sendPasswordResetEmail = email => {\n    return firebase.auth().sendPasswordResetEmail(email).then(() => {\n      return true;\n    });\n  };\n\n  const confirmPasswordReset = (code, password) => {\n    return firebase.auth().confirmPasswordReset(code, password).then(() => {\n      return true;\n    });\n  };\n\n  const signInWithGoogle = () => {\n    return firebase.auth().signInWithPopup(googleAuth).then(response => {\n      const cred = response.credential;\n      const token = cred.token;\n      setUser(response.user);\n      return response.user;\n    }).catch(e => setError(e));\n  };\n\n  useEffect(() => {\n    const userRef = firebase.firestore().collection(\"users\");\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      setLoading(true);\n\n      if (user) {\n        userRef.doc(user.uid).get().then(document => {\n          const userData = document.data(); //            console.log(\"User uid: \", user.uid, \"User: \", user, \"Document data: \", document.data())\n\n          setUser(userData);\n          setLoading(false);\n        });\n      } else {\n        setUser(false);\n        setLoading(false);\n      }\n    });\n    return () => unsubscribe();\n  }, []);\n  return {\n    user,\n    error,\n    signin,\n    signup,\n    signout,\n    loading,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    signInWithGoogle,\n    updateUser\n  };\n}\n\n_s2(useProvideAuth, \"FOpntwB10H5hCfVzE7D/PZlVbdo=\");\n\nexport function AuthProvider({\n  children\n}) {\n  _s3();\n\n  const auth = useProvideAuth();\n\n  if (auth.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: auth,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(AuthProvider, \"XNU4Jn8u4aVzJknlKOHFJq03xMo=\", false, function () {\n  return [useProvideAuth];\n});\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/FirebaseAuthProvider.js"],"names":["useState","useEffect","useContext","createContext","firebase","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_APPID","measurementId","REACT_APP_MEASUREMENT_ID","initializeApp","UserContext","useAuth","useProvideAuth","user","setUser","loading","setLoading","error","setError","googleAuth","auth","GoogleAuthProvider","signin","email","password","signInWithEmailAndPassword","then","response","catch","e","signup","displayName","phone","createUserWithEmailAndPassword","uid","initData","id","bio","twitter","instagram","website","picture","favorites","data","Object","assign","userRef","firestore","collection","doc","set","signout","signOut","updateUser","userData","update","console","log","message","sendPasswordResetEmail","confirmPasswordReset","code","signInWithGoogle","signInWithPopup","cred","credential","token","unsubscribe","onAuthStateChanged","get","document","AuthProvider","children"],"mappings":"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","sourcesContent":["import { \n  useState, \n  useEffect,\n  useContext,\n  createContext \n} from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\n\n/* \n * Auth API reference\n * https://firebase.google.com/docs/reference/js/firebase.auth.Auth\n */\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APPID,\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\nfirebase.initializeApp(firebaseConfig);\n\nconst UserContext = createContext();\n\nexport const useAuth = () => {\n  return useContext(UserContext);\n}\n\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const googleAuth = new firebase.auth.GoogleAuthProvider();\n\n  const signin = (email, password) => {\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(response => {\n        setUser(response.user);\n        return response.user;\n      })\n      .catch((e) => setError(e))\n  }\n\n  const signup = (displayName, phone, email, password) => {\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then(response => {\n        const uid = response.user.uid\n        const initData = {\n          id: uid,\n          email,\n          displayName,\n          phone,\n          bio: '',\n          twitter: '',\n          instagram: '',\n          website: '',\n          picture: '',\n          favorites: [],\n        }\n        // finish creating the full user object\n        const data = Object.assign({}, initData)\n\n        // User was already added to the Auth database, now add it to firestore\n        const userRef = firebase.firestore().collection(\"users\")\n        userRef.doc(uid).set(data).then(() => {\n          setUser(response.user);\n        })\n        .catch((e) => setError(e))\n        return response.user;\n      })\n  }\n\n  const signout = () => {\n    return firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        setUser(false);\n      })\n      .catch((e) => setError(e))\n  }\n\n  const updateUser = (userData) => {\n    const userRef = firebase.firestore().collection(\"users\");\n    if (user) {\n      userRef\n        .doc(user.id)\n        .update(userData)\n        .then(() => {\n          console.log(\"From provider after update: \", user)\n        })\n        .catch((e) => setError(e.message))\n    }\n  }\n\n  const sendPasswordResetEmail = (email) => {\n    return firebase\n      .auth()\n      .sendPasswordResetEmail(email)\n      .then(() => {\n        return true;\n      })\n  }\n\n  const confirmPasswordReset = (code, password) => {\n    return firebase\n      .auth()\n      .confirmPasswordReset(code, password)\n      .then(() => {\n        return true;\n      })\n  }\n\n  const signInWithGoogle = () => {\n    return firebase\n      .auth()\n      .signInWithPopup(googleAuth)\n      .then((response) => {\n        const cred = response.credential;\n        const token = cred.token;\n        setUser(response.user)\n        return response.user;\n      })\n      .catch((e) => setError(e))\n  }\n\n  useEffect(() => {\n    const userRef = firebase.firestore().collection(\"users\");\n    const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n      setLoading(true)\n\n      if (user) {\n        userRef\n          .doc(user.uid)\n          .get()\n          .then((document) => {\n            const userData = document.data()\n//            console.log(\"User uid: \", user.uid, \"User: \", user, \"Document data: \", document.data())\n            setUser(userData)\n            setLoading(false)\n          })\n      } else {\n        setUser(false)\n        setLoading(false)\n      }\n    })\n\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user,\n    error,\n    signin,\n    signup,\n    signout,\n    loading,\n    sendPasswordResetEmail,\n    confirmPasswordReset,\n    signInWithGoogle,\n    updateUser,\n  };\n}\n\nexport function AuthProvider({ children }) {\n  const auth = useProvideAuth();\n\n  if (auth.loading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <UserContext.Provider value={auth}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}