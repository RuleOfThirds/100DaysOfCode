{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/BaseSpirit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useCocktail } from '../Providers/CocktailProvider';\nimport MetricSelector from '../Components/MetricSelector';\nimport ImperialSelector from '../Components/ImperialSelector';\nimport spirits from '../static/spirits';\nimport { Container, TextField, FormControl, FormControlLabel, Select, ListSubheader, MenuItem, Checkbox } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  formContainer: {\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    padding: 20,\n    fontFamily: 'Nunito'\n  },\n  input: {\n    width: 650\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n    minWidth: 120\n  },\n  nextButton: {\n    borderRadius: 37\n  }\n}));\nexport default function BaseSpirit() {\n  _s();\n\n  const classes = useStyles();\n  const cocktail = useCocktail();\n  const cocktailData = cocktail.theCocktailData;\n  const [isMetric, setIsMetric] = useState(false);\n  const [baseSpiritObject, setBaseSpiritObject] = useState({});\n\n  const handleIsMetric = () => {\n    setIsMetric(!isMetric);\n  };\n  /*\n   * The way to make this work so that it adds everything to an object is to wrap the form in a <form> tag (go figure),\n   * and then create an object above. Then you create a function in CocktailProvider which takes an object as an argument,\n   * and adds it to the cocktailData object the same way buildCocktailFromInput does. \n   * Should work.\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    className: classes.formContainer,\n    children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n        color: \"secondary\",\n        id: \"metric\",\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 18\n      }, this),\n      label: \"Metric\",\n      onChange: handleIsMetric\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"baseSpirit\",\n        name: \"baseSpirit\",\n        value: cocktailData.baseSpirit,\n        label: \"Ingredient\",\n        variant: \"outlined\",\n        margin: \"normal\",\n        onChange: e => cocktail.buildCocktailFromInput(e),\n        InputProps: {\n          className: classes.input\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        name: \"spiritSelector\",\n        variant: \"outlined\",\n        className: classes.formControl,\n        children: /*#__PURE__*/_jsxDEV(Select // look up uncontrolled to controlled input errors\n        , {\n          defaultValue: \"\",\n          id: \"spiritType\",\n          name: \"spiritType\",\n          onClick: e => cocktail.buildCocktailFromInput(e),\n          children: [/*#__PURE__*/_jsxDEV(ListSubheader, {\n            children: \"Spirit Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), spirits.map((spirit, id) => {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: spirit,\n              children: spirit\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), isMetric ? /*#__PURE__*/_jsxDEV(MetricSelector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(ImperialSelector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BaseSpirit, \"8bRyv5xg8dbVPFKAy26DIreAzSI=\", false, function () {\n  return [useStyles, useCocktail];\n});\n\n_c = BaseSpirit;\n\nvar _c;\n\n$RefreshReg$(_c, \"BaseSpirit\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/BaseSpirit.js"],"names":["React","useState","useCocktail","MetricSelector","ImperialSelector","spirits","Container","TextField","FormControl","FormControlLabel","Select","ListSubheader","MenuItem","Checkbox","makeStyles","useStyles","theme","formContainer","backgroundColor","padding","fontFamily","input","width","formControl","margin","spacing","minWidth","nextButton","borderRadius","BaseSpirit","classes","cocktail","cocktailData","theCocktailData","isMetric","setIsMetric","baseSpiritObject","setBaseSpiritObject","handleIsMetric","baseSpirit","e","buildCocktailFromInput","className","map","spirit","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useCocktail } from '../Providers/CocktailProvider';\nimport MetricSelector from '../Components/MetricSelector';\nimport ImperialSelector from '../Components/ImperialSelector';\nimport spirits from '../static/spirits';\nimport {\n  Container,\n  TextField,\n  FormControl,\n  FormControlLabel,\n  Select,\n  ListSubheader,\n  MenuItem,\n  Checkbox,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  formContainer: {\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    padding: 20,\n    fontFamily: 'Nunito',\n  },\n  input: {\n    width: 650\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n    minWidth: 120,\n  },\n  nextButton: {\n    borderRadius: 37,\n  },\n}));\n\nexport default function BaseSpirit() {\n  const classes = useStyles();\n  const cocktail = useCocktail();\n  const cocktailData = cocktail.theCocktailData;\n  const [isMetric, setIsMetric] = useState(false);\n  const [baseSpiritObject, setBaseSpiritObject] = useState({});\n\n  const handleIsMetric = () => {\n    setIsMetric(!isMetric)\n  }\n\n  /*\n   * The way to make this work so that it adds everything to an object is to wrap the form in a <form> tag (go figure),\n   * and then create an object above. Then you create a function in CocktailProvider which takes an object as an argument,\n   * and adds it to the cocktailData object the same way buildCocktailFromInput does. \n   * Should work.\n   */\n\n  return (\n    <Container maxWidth=\"lg\" className={classes.formContainer}>\n      <FormControlLabel\n        control={<Checkbox color=\"secondary\" id=\"metric\" size=\"small\" />}\n        label=\"Metric\"\n        onChange={handleIsMetric}\n      />\n      <div>\n        <TextField \n          id='baseSpirit'\n          name='baseSpirit'\n          value={cocktailData.baseSpirit}\n          label='Ingredient'\n          variant='outlined'\n          margin='normal'\n          onChange={(e) => cocktail.buildCocktailFromInput(e)}\n          InputProps={{\n            className: classes.input\n          }}\n        />\n        <FormControl name='spiritSelector' variant=\"outlined\" className={classes.formControl}>\n          <Select \n            // look up uncontrolled to controlled input errors\n            defaultValue=\"\" \n            id='spiritType'\n            name='spiritType'\n            onClick={(e) => cocktail.buildCocktailFromInput(e)}\n          >\n            <ListSubheader>Spirit Type</ListSubheader>\n            {\n              spirits.map((spirit, id) => {\n                return (\n                  <MenuItem \n                    key={id}\n                    value={spirit}\n                  >\n                    {spirit}\n                  </MenuItem>\n                );\n              })\n            }\n          </Select>\n        </FormControl>\n      </div>\n      {\n        isMetric\n          ? <MetricSelector />\n          : <ImperialSelector />\n      }\n    </Container>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}