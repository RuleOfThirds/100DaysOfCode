{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Wizard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport MainBar from '../Helpers/MainBar';\nimport CocktailStepper from './CocktailStepper';\nimport { IconButton, Button } from '@material-ui/core';\nimport { Link as Scroll } from 'react-scroll';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    backgroundColor: '#303030',\n    position: 'sticky',\n    top: 0,\n    zIndex: 1\n  },\n  infoButton: {\n    float: 'right'\n  },\n  button: {\n    borderRadius: 37,\n    width: 250\n  },\n  buttonDiv: {\n    flex: 1,\n    margin: 25,\n    textAlign: 'center'\n  }\n}));\n/*\n * Notes:\n *  - git branch day36 if you want to see the version where you could pick your recipe type. \n *  - Removed that feature because it's WAY too much code and there must be a simpler way\n */\n\nexport default function Wizard() {\n  _s();\n\n  const classes = useStyles();\n  const steps = ['Basic Information', 'Base Spirit', 'Ingredients', 'Instructions'];\n  const [activeStep, setActiveStep] = useState(0);\n  const [showHelp, setShowHelp] = useState(false);\n  const [readyForReview, setReadyForReview] = useState(false);\n\n  const handleHelp = () => {\n    setShowHelp(!showHelp);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n  /*\n   * This should also be pushing the entered data into the object\n   * This could get complicated. I'll need to give each input a unique ID so that if I backtrack I can have it update\n   * The unique item you'd want to change otherwise stuff could get messy\n   */\n\n\n  const handleNext = () => {\n    if (activeStep < steps.length) {\n      setActiveStep(prevActiveStep => prevActiveStep + 1);\n    }\n  };\n\n  const handleReview = () => {\n    setReadyForReview(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(MainBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.appBar,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        disabled: activeStep === 0,\n        onClick: handleBack,\n        children: /*#__PURE__*/_jsxDEV(ExpandLessIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n        to: `step-${activeStep}`,\n        smooth: \"true\",\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleNext,\n          children:\n          /* If you're on the last step then display the CheckCircle instead of the ExpandMore */\n          activeStep >= steps.length - 1 ? /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n            onClick: handleReview\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this),\n      /* If you're at the end of your stepper then stop showing the help icon */\n      activeStep <= steps.length - 1 ? /*#__PURE__*/_jsxDEV(IconButton, {\n        className: classes.infoButton,\n        onClick: handleHelp,\n        children: /*#__PURE__*/_jsxDEV(InfoOutlinedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this) : false]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CocktailStepper, {\n      steps: steps,\n      activeStep: activeStep\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonDiv,\n      children:\n      /* Once all steps are completed then display the Review button */\n      readyForReview && activeStep >= steps.length ? /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.button,\n        variant: \"outlined\",\n        color: \"primary\",\n        href: \"/cocktail\",\n        onClick: () => console.log(\"Went to next\"),\n        children: \"Review\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this) : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Wizard, \"cUqB+uA6jXCU4LSog1Z+EqiVTdk=\", false, function () {\n  return [useStyles];\n});\n\n_c = Wizard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wizard\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Wizard.js"],"names":["React","useState","MainBar","CocktailStepper","IconButton","Button","Link","Scroll","ExpandMoreIcon","ExpandLessIcon","CheckCircleIcon","InfoOutlinedIcon","makeStyles","useStyles","theme","appBar","backgroundColor","position","top","zIndex","infoButton","float","button","borderRadius","width","buttonDiv","flex","margin","textAlign","Wizard","classes","steps","activeStep","setActiveStep","showHelp","setShowHelp","readyForReview","setReadyForReview","handleHelp","handleBack","prevActiveStep","handleNext","length","handleReview","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport MainBar from '../Helpers/MainBar';\nimport CocktailStepper from './CocktailStepper';\nimport {\n  IconButton,\n  Button,\n} from '@material-ui/core';\nimport { Link as Scroll } from 'react-scroll';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    backgroundColor: '#303030',\n    position: 'sticky',\n    top: 0,\n    zIndex: 1,\n  },\n  infoButton: {\n    float: 'right',\n  },\n  button: {\n    borderRadius: 37,\n    width: 250\n  },\n  buttonDiv: {\n    flex: 1,\n    margin: 25,\n    textAlign: 'center',\n  },\n}));\n\n/*\n * Notes:\n *  - git branch day36 if you want to see the version where you could pick your recipe type. \n *  - Removed that feature because it's WAY too much code and there must be a simpler way\n */\n\nexport default function Wizard() {\n  const classes = useStyles();\n  const steps = ['Basic Information', 'Base Spirit', 'Ingredients', 'Instructions'];\n  const [activeStep, setActiveStep] = useState(0);\n  const [showHelp, setShowHelp] = useState(false);\n  const [readyForReview, setReadyForReview] = useState(false);\n\n  const handleHelp = () => {\n    setShowHelp(!showHelp)\n  }\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1)\n  }\n\n  /*\n   * This should also be pushing the entered data into the object\n   * This could get complicated. I'll need to give each input a unique ID so that if I backtrack I can have it update\n   * The unique item you'd want to change otherwise stuff could get messy\n   */\n  const handleNext = () => {\n    if (activeStep < steps.length) {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1)\n    } \n  }\n\n  const handleReview = () => {\n    setReadyForReview(true)\n  }\n\n  return (\n    <main>\n      { \n        // Show help text if the InfoOutlinedIcon is clicked\n        //showHelp ? <Help step={activeStep} /> : false \n      }\n      <MainBar />\n      <div className={classes.appBar}>\n        <IconButton disabled={activeStep === 0} onClick={handleBack}>\n          <ExpandLessIcon />\n        </IconButton>\n        <Scroll to={`step-${activeStep}`} smooth=\"true\">\n          <IconButton\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleNext}\n          >\n            {\n              /* If you're on the last step then display the CheckCircle instead of the ExpandMore */\n              activeStep >= steps.length - 1\n                ? <CheckCircleIcon onClick={handleReview} />\n                : <ExpandMoreIcon />\n            }\n          </IconButton>\n        </Scroll>\n        {\n          /* If you're at the end of your stepper then stop showing the help icon */\n          activeStep <= steps.length - 1\n            ? <IconButton className={classes.infoButton} onClick={handleHelp}>\n                <InfoOutlinedIcon />\n              </IconButton>\n            : false\n        }\n      </div>\n      <CocktailStepper steps={steps} activeStep={activeStep} />\n      <div className={classes.buttonDiv}>\n      {\n        /* Once all steps are completed then display the Review button */\n        readyForReview && activeStep >= steps.length\n          ? <Button\n              className={classes.button}\n              variant=\"outlined\"\n              color=\"primary\"\n              href=\"/cocktail\"\n              onClick={() => console.log(\"Went to next\")}\n            >\n              Review\n            </Button>\n          : false\n      }\n      </div>\n    </main>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}