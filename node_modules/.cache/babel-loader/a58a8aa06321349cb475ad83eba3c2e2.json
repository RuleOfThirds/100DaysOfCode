{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Wizard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MainBar from '../Helpers/MainBar';\nimport Help from './Help';\nimport CocktailStepper from './CocktailStepper';\nimport RecipeStepper from './RecipeStepper';\nimport { Container, Grid, Typography, Collapse, IconButton, Stepper, Step, StepLabel, StepContent, FormControl, FormLabel, FormControlLabel, RadioGroup, Radio, Button } from '@material-ui/core';\nimport { Link as Scroll } from 'react-scroll';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    backgroundColor: '#303030',\n    position: 'sticky',\n    top: 0,\n    zIndex: 1\n  },\n  infoButton: {\n    float: 'right'\n  },\n  button: {\n    borderRadius: 37,\n    width: 250\n  },\n  buttonDiv: {\n    flex: 1,\n    margin: 25,\n    textAlign: 'center'\n  }\n}));\nexport default function Wizard() {\n  _s();\n\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = useState(0);\n  const [showHelp, setShowHelp] = useState(false);\n  const [readyForReview, setReadyForReview] = useState(false);\n  const [recipeType, setRecipeType] = useState(false);\n  const [showRecipePrompt, setShowRecipePrompt] = useState(true);\n\n  const handleHelp = () => {\n    setShowHelp(!showHelp);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleNext = () => {\n    // This should also be pushing the entered data into the object\n    // This could get complicated. I'll need to give each input a unique ID so that if I backtrack I can have it update\n    // The unique item you'd want to change otherwise stuff could get messy\n    if (activeStep < steps.length) {\n      setActiveStep(prevActiveStep => prevActiveStep + 1);\n    }\n  };\n\n  const handleRecipeType = event => {\n    setRecipeType(event.target.value);\n    setShowRecipePrompt(false);\n  };\n\n  const handleReview = () => {\n    setReadyForReview(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(MainBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), showRecipePrompt ? /*#__PURE__*/_jsxDEV(Container, {\n      className: classes.formContainer,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"What kind of recipe is this?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            component: \"fieldset\",\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              component: \"legend\",\n              children: \"Recipe Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n              \"aria-label\": \"recipe-type\",\n              name: \"recipe-type\",\n              onChange: handleRecipeType,\n              children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: \"cocktail\",\n                control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 67\n                }, this),\n                label: \"Cocktail\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: \"msi\",\n                control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 62\n                }, this),\n                label: \"Mixer/Syrup/Infusion\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: \"other\",\n                control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 64\n                }, this),\n                label: \"Other\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        color: \"primary\",\n        className: classes.button,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.appBar,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        disabled: activeStep === 0,\n        onClick: handleBack,\n        children: /*#__PURE__*/_jsxDEV(ExpandLessIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n        to: `step-${activeStep}`,\n        smooth: \"true\",\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleNext,\n          children:\n          /*\n           * If you're on the last step then display the CheckCircle instead of the ExpandMore\n           */\n          activeStep >= steps.length - 1 ? /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n            onClick: handleReview\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }, this),\n      /*\n       * If you're at the end of your stepper then stop showing the help icon\n       */\n      activeStep <= steps.length - 1 ? /*#__PURE__*/_jsxDEV(IconButton, {\n        className: classes.infoButton,\n        onClick: handleHelp,\n        children: /*#__PURE__*/_jsxDEV(InfoOutlinedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this) : false]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this),\n    /*\n     * Decide what Stepper type to show\n     */\n    !recipeType ? false : recipeType === 'cocktail' ? /*#__PURE__*/_jsxDEV(CocktailStepper, {\n      activeStep: activeStep\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(RecipeStepper, {\n      activeStep: activeStep\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonDiv,\n      children:\n      /*\n       * Once all steps are completed then display the Review button\n       */\n      readyForReview && activeStep >= steps.length ? /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.button,\n        variant: \"outlined\",\n        color: \"primary\",\n        href: \"/cocktail\",\n        onClick: () => console.log(\"Went to next\"),\n        children: \"Review\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this) : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Wizard, \"dwwqKoOF4rl9o3s3BCiy+HZehw8=\", false, function () {\n  return [useStyles];\n});\n\n_c = Wizard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wizard\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Wizard.js"],"names":["React","useState","useEffect","MainBar","Help","CocktailStepper","RecipeStepper","Container","Grid","Typography","Collapse","IconButton","Stepper","Step","StepLabel","StepContent","FormControl","FormLabel","FormControlLabel","RadioGroup","Radio","Button","Link","Scroll","ExpandMoreIcon","ExpandLessIcon","CheckCircleIcon","InfoOutlinedIcon","makeStyles","useStyles","theme","appBar","backgroundColor","position","top","zIndex","infoButton","float","button","borderRadius","width","buttonDiv","flex","margin","textAlign","Wizard","classes","activeStep","setActiveStep","showHelp","setShowHelp","readyForReview","setReadyForReview","recipeType","setRecipeType","showRecipePrompt","setShowRecipePrompt","handleHelp","handleBack","prevActiveStep","handleNext","steps","length","handleRecipeType","event","target","value","handleReview","formContainer","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MainBar from '../Helpers/MainBar';\nimport Help from './Help';\nimport CocktailStepper from './CocktailStepper';\nimport RecipeStepper from './RecipeStepper';\nimport {\n  Container,\n  Grid,\n  Typography,\n  Collapse,\n  IconButton,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n  FormControl,\n  FormLabel,\n  FormControlLabel,\n  RadioGroup,\n  Radio,\n  Button,\n} from '@material-ui/core';\nimport { Link as Scroll } from 'react-scroll';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    backgroundColor: '#303030',\n    position: 'sticky',\n    top: 0,\n    zIndex: 1,\n  },\n  infoButton: {\n    float: 'right',\n  },\n  button: {\n  borderRadius: 37,\n    width: 250\n  },\n  buttonDiv: {\n    flex: 1,\n    margin: 25,\n  textAlign: 'center',\n  },\n}));\n\nexport default function Wizard() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = useState(0);\n  const [showHelp, setShowHelp] = useState(false);\n  const [readyForReview, setReadyForReview] = useState(false);\n  const [recipeType, setRecipeType] = useState(false);\n  const [showRecipePrompt, setShowRecipePrompt] = useState(true);\n\n  const handleHelp = () => {\n    setShowHelp(!showHelp)\n  }\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1)\n  }\n\n  const handleNext = () => {\n    // This should also be pushing the entered data into the object\n    // This could get complicated. I'll need to give each input a unique ID so that if I backtrack I can have it update\n    // The unique item you'd want to change otherwise stuff could get messy\n    if (activeStep < steps.length) {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1)\n    } \n  }\n\n  const handleRecipeType = (event) => {\n    setRecipeType(event.target.value)\n    setShowRecipePrompt(false)\n  }\n\n  const handleReview = () => {\n    setReadyForReview(true)\n  }\n\n  return (\n    <main>\n      { \n        // Show help text if the InfoOutlinedIcon is clicked\n        //showHelp ? <Help step={activeStep} /> : false \n      }\n      <MainBar />\n      {\n        showRecipePrompt \n          ? <Container className={classes.formContainer}>\n              <Grid container alignItems=\"center\">\n                <Grid item xs>\n                <Typography>\n                  What kind of recipe is this?\n                </Typography>\n                </Grid>\n                <Grid item xs>\n                  <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">Recipe Type</FormLabel>\n                    <RadioGroup aria-label=\"recipe-type\" name=\"recipe-type\" onChange={handleRecipeType}>\n                      <FormControlLabel value=\"cocktail\" control={<Radio />} label=\"Cocktail\" />\n                      <FormControlLabel value=\"msi\" control={<Radio />} label=\"Mixer/Syrup/Infusion\" />\n                      <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" />\n                    </RadioGroup>\n                  </FormControl>\n                </Grid>\n              </Grid>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                className={classes.button}\n              >\n                Next\n              </Button>\n            </Container>\n          : <div className={classes.appBar}>\n              <IconButton disabled={activeStep === 0} onClick={handleBack}>\n                <ExpandLessIcon />\n              </IconButton>\n              <Scroll to={`step-${activeStep}`} smooth=\"true\">\n                <IconButton\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                >\n                  {\n                    /*\n                     * If you're on the last step then display the CheckCircle instead of the ExpandMore\n                     */\n                    activeStep >= steps.length - 1\n                      ? <CheckCircleIcon onClick={handleReview} />\n                      : <ExpandMoreIcon />\n                  }\n                </IconButton>\n              </Scroll>\n              {\n                /*\n                 * If you're at the end of your stepper then stop showing the help icon\n                 */\n                activeStep <= steps.length - 1\n                  ? <IconButton className={classes.infoButton} onClick={handleHelp}>\n                      <InfoOutlinedIcon />\n                    </IconButton>\n                  : false\n              }\n            </div>\n      }\n      {\n        /*\n         * Decide what Stepper type to show\n         */\n        !recipeType ? false : (\n          recipeType === 'cocktail'\n            ? <CocktailStepper activeStep={activeStep} />\n            : <RecipeStepper activeStep={activeStep} />\n        )\n      }\n      <div className={classes.buttonDiv}>\n      {\n        /*\n         * Once all steps are completed then display the Review button\n         */\n        readyForReview && activeStep >= steps.length\n          ? <Button\n              className={classes.button}\n              variant=\"outlined\"\n              color=\"primary\"\n              href=\"/cocktail\"\n              onClick={() => console.log(\"Went to next\")}\n            >\n              Review\n            </Button>\n          : false\n      }\n      </div>\n    </main>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}