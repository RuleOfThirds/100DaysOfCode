{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Ingredients.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport MetricSelector from '../Helpers/MetricSelector';\nimport ImperialSelector from '../Helpers/ImperialSelector';\nimport { Container, TextField, Grid, FormControlLabel, Checkbox, IconButton, Switch } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link as Scroll } from 'react-scroll';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nconst useStyles = makeStyles(theme => ({\n  formContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    padding: 20,\n    fontFamily: 'Nunito'\n  },\n  input: {\n    width: 900\n  },\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 120\n  },\n  nextItem: {\n    textAlign: 'center'\n  }\n}));\n\nfunction IngredientInput({\n  isMetric\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [isUnitIngredient, setIsUnitIngredient] = useState(true);\n\n  const handleIsUnitIngredient = () => {\n    setIsUnitIngredient(!isUnitIngredient);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      alignItems: \"center\",\n      spacing: 10,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: true,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"ingredient\",\n          label: \"Ingredient\",\n          variant: \"outlined\",\n          margin: \"normal\",\n          InputProps: {\n            className: classes.input\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: true,\n        children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            name: \"recipe-type\",\n            color: \"secondary\",\n            onChange: handleIsUnitIngredient\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this),\n          label: \"Has Unit?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), isUnitIngredient ? isMetric ? /*#__PURE__*/_jsxDEV(MetricSelector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(ImperialSelector, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this) : false]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(IngredientInput, \"ExhWeLhPWuFy82lQO4odtHmsueg=\", false, function () {\n  return [useStyles];\n});\n\n_c = IngredientInput;\nexport default function Ingredients() {\n  _s2();\n\n  const classes = useStyles();\n  const [isMetric, setIsMetric] = useState(false);\n  const newInput = {\n    'amount': '',\n    'name': '',\n    'unit': ''\n  };\n  const [inputs, setInputs] = useState([{ ...newInput\n  }]);\n\n  const handleIsMetric = () => {\n    setIsMetric(!isMetric);\n  };\n\n  const addNewInput = () => {\n    setInputs([...inputs, { ...newInput\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    className: classes.formContainer,\n    children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, {\n        color: \"secondary\",\n        id: \"metric\",\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 18\n      }, this),\n      label: \"Metric\",\n      onChange: handleIsMetric\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), inputs.map((id, input) => {\n      return /*#__PURE__*/_jsxDEV(IngredientInput, {\n        id: `ingredient-${id}`,\n        isMetric: isMetric\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 18\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        onClick: addNewInput,\n        color: \"primary\",\n        children: /*#__PURE__*/_jsxDEV(AddBoxIcon, {\n          fontSize: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Ingredients, \"FqgVNsKLjqMVoyPxtKYAlA/ORRA=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = Ingredients;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IngredientInput\");\n$RefreshReg$(_c2, \"Ingredients\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Ingredients.js"],"names":["React","useState","MetricSelector","ImperialSelector","Container","TextField","Grid","FormControlLabel","Checkbox","IconButton","Switch","makeStyles","Link","Scroll","AddBoxIcon","useStyles","theme","formContainer","display","flexDirection","backgroundColor","padding","fontFamily","input","width","formControl","margin","spacing","minWidth","nextItem","textAlign","IngredientInput","isMetric","classes","isUnitIngredient","setIsUnitIngredient","handleIsUnitIngredient","className","Ingredients","setIsMetric","newInput","inputs","setInputs","handleIsMetric","addNewInput","map","id"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport MetricSelector from '../Helpers/MetricSelector';\nimport ImperialSelector from '../Helpers/ImperialSelector';\nimport {\n  Container,\n  TextField,\n  Grid,\n  FormControlLabel,\n  Checkbox,\n  IconButton,\n  Switch,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link as Scroll } from 'react-scroll';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\n\nconst useStyles = makeStyles(theme => ({\n  formContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: 'rgba(0,0,0,0.3)',\n    padding: 20,\n    fontFamily: 'Nunito',\n  },\n  input: {\n    width: 900,\n  },\n  formControl: {\n    margin: theme.spacing(2),\n    minWidth: 120,\n  },\n  nextItem: {\n    textAlign: 'center',\n  },\n}));\n\nfunction IngredientInput({ isMetric }) {\n  const classes = useStyles();\n  const [isUnitIngredient, setIsUnitIngredient] = useState(true);\n\n  const handleIsUnitIngredient = () => {\n    setIsUnitIngredient(!isUnitIngredient)\n  }\n\n  return (\n    <div>\n      <Grid container alignItems=\"center\" spacing={10}>\n        <Grid item xs>\n          <TextField \n            id='ingredient'\n            label='Ingredient'\n            variant='outlined'\n            margin='normal'\n            InputProps={{\n              className: classes.input\n            }}\n          />\n        </Grid>\n        <Grid item xs>\n          <FormControlLabel\n            control={\n              <Switch\n                name=\"recipe-type\"\n                color=\"secondary\"\n                onChange={handleIsUnitIngredient}\n              />\n            }\n            label=\"Has Unit?\"\n          />\n        </Grid>\n      </Grid>\n      {\n        isUnitIngredient \n          ? (\n            isMetric\n              ? <MetricSelector />\n              : <ImperialSelector />\n          )\n          : false\n      }\n    </div>\n  );\n}\n\nexport default function Ingredients() {\n  const classes = useStyles();\n  const [isMetric, setIsMetric] = useState(false);\n  const newInput = {\n    'amount': '',\n    'name': '',\n    'unit': '',\n  };\n  const [inputs, setInputs] = useState([{...newInput}]);\n\n  const handleIsMetric = () => {\n    setIsMetric(!isMetric)\n  }\n\n  const addNewInput = () => {\n    setInputs([...inputs, {...newInput}])\n  }\n\n  return (\n    <Container maxWidth=\"lg\" className={classes.formContainer}>\n      <FormControlLabel\n        control={<Checkbox color=\"secondary\" id=\"metric\" size=\"small\" />}\n        label=\"Metric\"\n        onChange={handleIsMetric}\n      />\n      {\n        inputs.map((id, input) => { \n          return <IngredientInput key={id} id={`ingredient-${id}`} isMetric={isMetric} />\n        })\n      }\n      <div>\n        <IconButton onClick={addNewInput} color=\"primary\">\n          <AddBoxIcon fontSize=\"large\"/>\n        </IconButton>\n      </div>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}