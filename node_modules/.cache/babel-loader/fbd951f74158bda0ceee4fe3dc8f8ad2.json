{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Wizard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MainBar from '../Helpers/MainBar';\nimport RecipeType from './RecipeType';\nimport BasicInfo from './BasicInfo';\nimport BaseSpirit from './BaseSpirit';\nimport Ingredients from './Ingredients';\nimport Instructions from './Instructions';\nimport Help from './Help';\nimport { Typography, Collapse, IconButton, Button, Stepper, Step, StepLabel, StepContent } from '@material-ui/core';\nimport { Link as Scroll } from 'react-scroll';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    backgroundColor: '#303030',\n    position: 'sticky',\n    top: 0,\n    zIndex: 1\n  },\n  infoButton: {\n    float: 'right'\n  },\n  button: {\n    borderRadius: 37,\n    width: 250\n  },\n  buttonDiv: {\n    flex: 1,\n    margin: 25,\n    textAlign: 'center'\n  }\n})); // You may need to refer to this: https://stackoverflow.com/questions/61215349/material-ui-stepper-not-keeping-state-when-move-next-or-back\n\nfunction renderCocktailSteps(step) {\n  switch (step) {\n    case 0:\n      return /*#__PURE__*/_jsxDEV(BasicInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 14\n      }, this);\n\n    case 1:\n      return /*#__PURE__*/_jsxDEV(BaseSpirit, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 14\n      }, this);\n\n    case 2:\n      return /*#__PURE__*/_jsxDEV(Ingredients, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 14\n      }, this);\n\n    case 3:\n      return /*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }, this);\n\n    default:\n      return false;\n  }\n}\n\nfunction renderNonCocktailSteps(step) {\n  switch (step) {\n    case 0:\n      // this needs to be different\n      return /*#__PURE__*/_jsxDEV(BasicInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 14\n      }, this);\n\n    case 1:\n      return /*#__PURE__*/_jsxDEV(Ingredients, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 14\n      }, this);\n\n    case 2:\n      // This also needs to be different\n      return /*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }, this);\n\n    default:\n      return false;\n  }\n}\n\nfunction navAppBar({\n  activeStep,\n  handleBack,\n  handleNext,\n  handleReview,\n  handleHelp\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.appBar,\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      disabled: activeStep === 0,\n      onClick: handleBack,\n      children: /*#__PURE__*/_jsxDEV(ExpandLessIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n      to: `step-${activeStep}`,\n      smooth: \"true\",\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleNext,\n        children: // If you're on the last step then display the CheckCircle instead of the ExpandMore\n        activeStep >= steps.length - 1 ? /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n          onClick: handleReview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), // If you're at the end of your stepper then stop showing the help icon\n    activeStep <= steps.length - 1 ? /*#__PURE__*/_jsxDEV(IconButton, {\n      className: classes.infoButton,\n      onClick: handleHelp,\n      children: /*#__PURE__*/_jsxDEV(InfoOutlinedIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this) : false]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\nexport default function Wizard() {\n  _s();\n\n  const classes = useStyles();\n  const steps = ['Basic Information', 'Base Spirit', 'Ingredients', 'Instructions'];\n  const [checked, setChecked] = useState(false);\n  const [activeStep, setActiveStep] = useState(0);\n  const [readyForReview, setReadyForReview] = useState(false);\n  const [recipeType, setRecipeType] = useState(false);\n  const [showHelp, setShowHelp] = useState(false);\n  useEffect(() => {\n    setChecked(true);\n  }, []);\n\n  const handleHelp = () => {\n    setShowHelp(!showHelp);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleNext = () => {\n    // This should also be pushing the entered data into the object\n    // This could get complicated. I'll need to give each input a unique ID so that if I backtrack I can have it update\n    // The unique item you'd want to change otherwise stuff could get messy\n    if (activeStep < steps.length) {\n      setActiveStep(prevActiveStep => prevActiveStep + 1);\n    }\n  };\n\n  const handleRecipeType = event => {\n    setRecipeType(event.target.value);\n  };\n\n  const handleReview = () => {\n    setReadyForReview(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(MainBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      appear: true,\n      in: checked,\n      ...(checked ? {\n        timeout: 1000\n      } : {}),\n      children: /*#__PURE__*/_jsxDEV(RecipeType, {\n        handleRecipeType: handleRecipeType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), // Decide what Stepper type to show\n    !recipeType ? false : recipeType === 'cocktail' ? /*#__PURE__*/_jsxDEV(Stepper, {\n      id: `step-${activeStep}`,\n      activeStep: activeStep,\n      orientation: \"vertical\",\n      children: steps.map((label, index) => /*#__PURE__*/_jsxDEV(Step, {\n        children: [/*#__PURE__*/_jsxDEV(StepLabel, {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(StepContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: renderCocktailSteps(index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 27\n          }, this), // Stop showing the secondary ExpandMoreIcon if you've reached the Instructions step\n          // Also, this ExpandMoreIcon should push data to the recipe object array\n          index < steps.length - 1 ? /*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"primary\",\n            children: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n              onClick: handleNext,\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 35\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 33\n          }, this) : false]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this)]\n      }, label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 23\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(Stepper, {\n      id: `step-${activeStep}`,\n      activeStep: activeStep,\n      orientation: \"vertical\",\n      children: steps.map((label, index) => /*#__PURE__*/_jsxDEV(Step, {\n        children: [/*#__PURE__*/_jsxDEV(StepLabel, {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(StepContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: renderNonCocktailSteps(index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 27\n          }, this), // Stop showing the secondary ExpandMoreIcon if you've reached the Instructions step\n          // Also, this ExpandMoreIcon should push data to the recipe object array\n          index < steps.length - 1 ? /*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"primary\",\n            children: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n              onClick: handleNext,\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 35\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 33\n          }, this) : false]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }, this)]\n      }, label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 23\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonDiv,\n      children: // Once all steps are completed then display the Review button\n      readyForReview && activeStep >= steps.length ? /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.button,\n        variant: \"outlined\",\n        color: \"primary\",\n        href: \"/cocktail\",\n        onClick: () => console.log(\"Went to next\"),\n        children: \"Review\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this) : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Wizard, \"/MX1cIOGx9bHAw5+4qFmdWO5q7A=\", false, function () {\n  return [useStyles];\n});\n\n_c = Wizard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wizard\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Wizard.js"],"names":["React","useState","useEffect","MainBar","RecipeType","BasicInfo","BaseSpirit","Ingredients","Instructions","Help","Typography","Collapse","IconButton","Button","Stepper","Step","StepLabel","StepContent","Link","Scroll","ExpandMoreIcon","ExpandLessIcon","CheckCircleIcon","InfoOutlinedIcon","makeStyles","useStyles","theme","appBar","backgroundColor","position","top","zIndex","infoButton","float","button","borderRadius","width","buttonDiv","flex","margin","textAlign","renderCocktailSteps","step","renderNonCocktailSteps","navAppBar","activeStep","handleBack","handleNext","handleReview","handleHelp","classes","steps","length","Wizard","checked","setChecked","setActiveStep","readyForReview","setReadyForReview","recipeType","setRecipeType","showHelp","setShowHelp","prevActiveStep","handleRecipeType","event","target","value","timeout","map","label","index","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MainBar from '../Helpers/MainBar';\nimport RecipeType from './RecipeType';\nimport BasicInfo from './BasicInfo';\nimport BaseSpirit from './BaseSpirit';\nimport Ingredients from './Ingredients';\nimport Instructions from './Instructions';\nimport Help from './Help';\nimport {\n  Typography,\n  Collapse,\n  IconButton,\n  Button,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n} from '@material-ui/core';\nimport { Link as Scroll } from 'react-scroll';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  appBar: {\n    backgroundColor: '#303030',\n    position: 'sticky',\n    top: 0,\n    zIndex: 1,\n  },\n  infoButton: {\n    float: 'right',\n  },\n  button: {\n    borderRadius: 37,\n    width: 250\n  },\n  buttonDiv: {\n    flex: 1,\n    margin: 25,\n    textAlign: 'center',\n  },\n}));\n\n// You may need to refer to this: https://stackoverflow.com/questions/61215349/material-ui-stepper-not-keeping-state-when-move-next-or-back\nfunction renderCocktailSteps(step) {\n  switch (step) {\n    case 0:\n      return <BasicInfo />\n    case 1:\n      return <BaseSpirit />\n    case 2:\n      return <Ingredients />\n    case 3: \n      return <Instructions />\n    default:\n      return false\n  }\n}\n\nfunction renderNonCocktailSteps(step) {\n  switch (step) {\n    case 0:\n        // this needs to be different\n      return <BasicInfo />\n    case 1:\n      return <Ingredients />\n    case 2: \n      // This also needs to be different\n      return <Instructions />\n    default:\n      return false\n  }\n}\n\nfunction navAppBar({ activeStep, handleBack, handleNext, handleReview, handleHelp }) {\n  return (\n    <div className={classes.appBar}>\n      <IconButton disabled={activeStep === 0} onClick={handleBack}>\n        <ExpandLessIcon />\n      </IconButton>\n      <Scroll to={`step-${activeStep}`} smooth=\"true\">\n        <IconButton\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleNext}\n        >\n          {\n            // If you're on the last step then display the CheckCircle instead of the ExpandMore\n            activeStep >= steps.length - 1\n              ? <CheckCircleIcon onClick={handleReview} />\n              : <ExpandMoreIcon />\n          }\n        </IconButton>\n      </Scroll>\n      {\n        // If you're at the end of your stepper then stop showing the help icon\n        activeStep <= steps.length - 1\n          ? <IconButton className={classes.infoButton} onClick={handleHelp}>\n              <InfoOutlinedIcon />\n            </IconButton>\n          : false\n      }\n    </div>\n  )\n}\n\nexport default function Wizard() {\n  const classes = useStyles();\n  const steps = ['Basic Information', 'Base Spirit', 'Ingredients', 'Instructions'];\n  const [checked, setChecked] = useState(false);\n  const [activeStep, setActiveStep] = useState(0);\n  const [readyForReview, setReadyForReview] = useState(false);\n  const [recipeType, setRecipeType] = useState(false);\n  const [showHelp, setShowHelp] = useState(false);\n  \n  useEffect(() => {\n    setChecked(true);\n  }, []);\n\n  const handleHelp = () => {\n    setShowHelp(!showHelp)\n  }\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1)\n  }\n\n  const handleNext = () => {\n    // This should also be pushing the entered data into the object\n    // This could get complicated. I'll need to give each input a unique ID so that if I backtrack I can have it update\n    // The unique item you'd want to change otherwise stuff could get messy\n    if (activeStep < steps.length) {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1)\n    } \n  }\n\n  const handleRecipeType = (event) => {\n    setRecipeType(event.target.value)\n  }\n\n  const handleReview = () => {\n    setReadyForReview(true)\n  }\n\n  return (\n    <main>\n      { \n        // Show help text if the InfoOutlinedIcon is clicked\n        //showHelp ? <Help step={activeStep} /> : false \n      }\n      <MainBar />\n\n      <Collapse appear in={checked} {\n        ... checked ? { timeout: 1000 } : {}\n      }>\n        <RecipeType handleRecipeType={handleRecipeType} />\n      </Collapse>\n      {\n        // Decide what Stepper type to show\n        !recipeType\n          ? false\n          : (\n            recipeType === 'cocktail'\n              ? <Stepper \n                  id={`step-${activeStep}`} \n                  activeStep={activeStep} \n                  orientation=\"vertical\"\n                >\n                  {\n                    steps.map((label, index) => (\n                      <Step key={label}>\n                        <StepLabel>{label}</StepLabel>\n                        <StepContent>\n                          <Typography>{renderCocktailSteps(index)}</Typography>\n                          {\n                            // Stop showing the secondary ExpandMoreIcon if you've reached the Instructions step\n                            // Also, this ExpandMoreIcon should push data to the recipe object array\n                            index < steps.length - 1\n                              ? <IconButton color=\"primary\">\n                                  <ExpandMoreIcon onClick={handleNext} fontSize=\"large\" />\n                                </IconButton>\n                              : false\n                          }\n                        </StepContent>\n                      </Step>\n                    ))\n                  }\n                </Stepper>\n              : <Stepper \n                  id={`step-${activeStep}`} \n                  activeStep={activeStep} \n                  orientation=\"vertical\"\n                >\n                  {\n                    steps.map((label, index) => (\n                      <Step key={label}>\n                        <StepLabel>{label}</StepLabel>\n                        <StepContent>\n                          <Typography>{renderNonCocktailSteps(index)}</Typography>\n                          {\n                            // Stop showing the secondary ExpandMoreIcon if you've reached the Instructions step\n                            // Also, this ExpandMoreIcon should push data to the recipe object array\n                            index < steps.length - 1\n                              ? <IconButton color=\"primary\">\n                                  <ExpandMoreIcon onClick={handleNext} fontSize=\"large\" />\n                                </IconButton>\n                              : false\n                          }\n                        </StepContent>\n                      </Step>\n                    ))\n                  }\n                </Stepper>\n          )\n      }\n      <div className={classes.buttonDiv}>\n      {\n        // Once all steps are completed then display the Review button\n        readyForReview && activeStep >= steps.length\n          ? <Button\n              className={classes.button}\n              variant=\"outlined\"\n              color=\"primary\"\n              href=\"/cocktail\"\n              onClick={() => console.log(\"Went to next\")}\n            >\n              Review\n            </Button>\n          : false\n      }\n      </div>\n    </main>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}