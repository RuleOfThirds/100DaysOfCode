{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Wizard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MainBar from '../Helpers/MainBar';\nimport RecipeType from './RecipeType';\nimport BasicInfo from './BasicInfo';\nimport BaseSpirit from './BaseSpirit';\nimport Ingredients from './Ingredients';\nimport Instructions from './Instructions';\nimport Help from './Help';\nimport { Typography, Collapse, IconButton, Button, Stepper, Step, StepLabel, StepContent } from '@material-ui/core';\nimport { Link as Scroll } from 'react-scroll';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  stepNav: {\n    backgroundColor: '#303030',\n    position: 'sticky',\n    top: 0,\n    zIndex: 1\n  },\n  infoButton: {\n    float: 'right'\n  },\n  button: {\n    borderRadius: 37,\n    width: 250\n  },\n  buttonDiv: {\n    flex: 1,\n    margin: 25,\n    textAlign: 'center'\n  }\n})); // You may need to refer to this: https://stackoverflow.com/questions/61215349/material-ui-stepper-not-keeping-state-when-move-next-or-back\n\nfunction renderCocktailSteps(step) {\n  switch (step) {\n    case 0:\n      return /*#__PURE__*/_jsxDEV(BasicInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 14\n      }, this);\n\n    case 1:\n      return /*#__PURE__*/_jsxDEV(BaseSpirit, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 14\n      }, this);\n\n    case 2:\n      return /*#__PURE__*/_jsxDEV(Ingredients, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 14\n      }, this);\n\n    case 3:\n      return /*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }, this);\n\n    default:\n      return false;\n  }\n}\n\nfunction renderNonCocktailSteps(step) {\n  switch (step) {\n    case 0:\n      // this needs to be different\n      return /*#__PURE__*/_jsxDEV(BasicInfo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 14\n      }, this);\n\n    case 1:\n      return /*#__PURE__*/_jsxDEV(Ingredients, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 14\n      }, this);\n\n    case 2:\n      // This also needs to be different\n      return /*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }, this);\n\n    default:\n      return false;\n  }\n}\n\nexport default function Create() {\n  _s();\n\n  const classes = useStyles();\n  const steps = ['Basic Information', 'Base Spirit', 'Ingredients', 'Instructions'];\n  const [checked, setChecked] = useState(false);\n  const [activeStep, setActiveStep] = useState(0);\n  const [readyForReview, setReadyForReview] = useState(false);\n  const [recipeType, setRecipeType] = useState(null);\n  const [showHelp, setShowHelp] = useState(false);\n  useEffect(() => {\n    setChecked(true);\n  }, []);\n\n  const handleHelp = () => {\n    setShowHelp(!showHelp);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleNext = () => {\n    // This should also be pushing the entered data into the object\n    // This could get complicated. I'll need to give each input a unique ID so that if I backtrack I can have it update\n    // The unique item you'd want to change otherwise stuff could get messy\n    if (activeStep < steps.length) {\n      setActiveStep(prevActiveStep => prevActiveStep + 1);\n    }\n  };\n\n  const handleRecipeType = event => {\n    setRecipeType(event.target.value);\n  };\n\n  const handleReview = () => {\n    setReadyForReview(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(MainBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.stepNav,\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        disabled: activeStep === 0,\n        onClick: handleBack,\n        children: /*#__PURE__*/_jsxDEV(ExpandLessIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n        to: `step-${activeStep}`,\n        smooth: \"true\",\n        children: /*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleNext,\n          children: // If you're on the last step then display the CheckCircle instead of the ExpandMore\n          activeStep >= steps.length - 1 ? /*#__PURE__*/_jsxDEV(CheckCircleIcon, {\n            onClick: handleReview\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), // If you're at the end of your stepper then stop showing the help icon\n      activeStep <= steps.length - 1 ? /*#__PURE__*/_jsxDEV(IconButton, {\n        className: classes.infoButton,\n        onClick: handleHelp,\n        children: /*#__PURE__*/_jsxDEV(InfoOutlinedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }, this) : false]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n      appear: true,\n      in: checked,\n      ...(checked ? {\n        timeout: 1000\n      } : {}),\n      children: /*#__PURE__*/_jsxDEV(RecipeType, {\n        handleRecipeType: handleRecipeType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stepper, {\n      id: `step-${activeStep}`,\n      activeStep: activeStep,\n      orientation: \"vertical\",\n      children: steps.map((label, index) => /*#__PURE__*/_jsxDEV(Step, {\n        children: [/*#__PURE__*/_jsxDEV(StepLabel, {\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(StepContent, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            children: renderCocktailSteps(index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 19\n          }, this), // Stop showing the secondary ExpandMoreIcon if you've reached the Instructions step\n          // Also, this ExpandMoreIcon should push data to the recipe object array\n          index < steps.length - 1 ? /*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"primary\",\n            children: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n              onClick: handleNext,\n              fontSize: \"large\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 27\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this) : false]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }, this)]\n      }, label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonDiv,\n      children: // Once all steps are completed then display the Review button\n      readyForReview && activeStep >= steps.length ? /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.button,\n        variant: \"outlined\",\n        color: \"primary\",\n        href: \"/cocktail\",\n        onClick: () => console.log(\"Went to next\"),\n        children: \"Review\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this) : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Create, \"oxoGFk9Y2WiALCt0PxLU8r+i/BI=\", false, function () {\n  return [useStyles];\n});\n\n_c = Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/CreationWizard/Wizard.js"],"names":["React","useState","useEffect","MainBar","RecipeType","BasicInfo","BaseSpirit","Ingredients","Instructions","Help","Typography","Collapse","IconButton","Button","Stepper","Step","StepLabel","StepContent","Link","Scroll","ExpandMoreIcon","ExpandLessIcon","CheckCircleIcon","InfoOutlinedIcon","makeStyles","useStyles","theme","stepNav","backgroundColor","position","top","zIndex","infoButton","float","button","borderRadius","width","buttonDiv","flex","margin","textAlign","renderCocktailSteps","step","renderNonCocktailSteps","Create","classes","steps","checked","setChecked","activeStep","setActiveStep","readyForReview","setReadyForReview","recipeType","setRecipeType","showHelp","setShowHelp","handleHelp","handleBack","prevActiveStep","handleNext","length","handleRecipeType","event","target","value","handleReview","timeout","map","label","index","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MainBar from '../Helpers/MainBar';\nimport RecipeType from './RecipeType';\nimport BasicInfo from './BasicInfo';\nimport BaseSpirit from './BaseSpirit';\nimport Ingredients from './Ingredients';\nimport Instructions from './Instructions';\nimport Help from './Help';\nimport {\n  Typography,\n  Collapse,\n  IconButton,\n  Button,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n} from '@material-ui/core';\nimport { Link as Scroll } from 'react-scroll';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  stepNav: {\n    backgroundColor: '#303030',\n    position: 'sticky',\n    top: 0,\n    zIndex: 1,\n  },\n  infoButton: {\n    float: 'right',\n  },\n  button: {\n    borderRadius: 37,\n    width: 250\n  },\n  buttonDiv: {\n    flex: 1,\n    margin: 25,\n    textAlign: 'center',\n  },\n}));\n\n// You may need to refer to this: https://stackoverflow.com/questions/61215349/material-ui-stepper-not-keeping-state-when-move-next-or-back\nfunction renderCocktailSteps(step) {\n  switch (step) {\n    case 0:\n      return <BasicInfo />\n    case 1:\n      return <BaseSpirit />\n    case 2:\n      return <Ingredients />\n    case 3: \n      return <Instructions />\n    default:\n      return false\n  }\n}\n\nfunction renderNonCocktailSteps(step) {\n  switch (step) {\n    case 0:\n        // this needs to be different\n      return <BasicInfo />\n    case 1:\n      return <Ingredients />\n    case 2: \n      // This also needs to be different\n      return <Instructions />\n    default:\n      return false\n  }\n}\n\nexport default function Create() {\n  const classes = useStyles();\n  const steps = ['Basic Information', 'Base Spirit', 'Ingredients', 'Instructions'];\n  const [checked, setChecked] = useState(false);\n  const [activeStep, setActiveStep] = useState(0);\n  const [readyForReview, setReadyForReview] = useState(false);\n  const [recipeType, setRecipeType] = useState(null);\n  const [showHelp, setShowHelp] = useState(false);\n  \n  useEffect(() => {\n    setChecked(true);\n  }, []);\n\n  const handleHelp = () => {\n    setShowHelp(!showHelp)\n  }\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1)\n  }\n\n  const handleNext = () => {\n    // This should also be pushing the entered data into the object\n    // This could get complicated. I'll need to give each input a unique ID so that if I backtrack I can have it update\n    // The unique item you'd want to change otherwise stuff could get messy\n    if (activeStep < steps.length) {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1)\n    } \n  }\n\n  const handleRecipeType = (event) => {\n    setRecipeType(event.target.value)\n  }\n\n  const handleReview = () => {\n    setReadyForReview(true)\n  }\n\n  return (\n    <main>\n      { \n        // Show help text if the InfoOutlinedIcon is clicked\n        //showHelp ? <Help step={activeStep} /> : false \n      }\n      <MainBar />\n      <div className={classes.stepNav}>\n        <IconButton disabled={activeStep === 0} onClick={handleBack}>\n          <ExpandLessIcon />\n        </IconButton>\n        <Scroll to={`step-${activeStep}`} smooth=\"true\">\n          <IconButton\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleNext}\n          >\n            {\n              // If you're on the last step then display the CheckCircle instead of the ExpandMore\n              activeStep >= steps.length - 1\n                ? <CheckCircleIcon onClick={handleReview} />\n                : <ExpandMoreIcon />\n            }\n          </IconButton>\n        </Scroll>\n        {\n          // If you're at the end of your stepper then stop showing the help icon\n          activeStep <= steps.length - 1\n            ? <IconButton className={classes.infoButton} onClick={handleHelp}>\n                <InfoOutlinedIcon />\n              </IconButton>\n            : false\n        }\n      </div>\n      <Collapse appear in={checked} {\n        ... checked ? { timeout: 1000 } : {}\n      }>\n        <RecipeType handleRecipeType={handleRecipeType} />\n      </Collapse>\n        <Stepper \n          id={`step-${activeStep}`} \n          activeStep={activeStep} \n          orientation=\"vertical\"\n        >\n          {\n            steps.map((label, index) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n                <StepContent>\n                  <Typography>{renderCocktailSteps(index)}</Typography>\n                  {\n                    // Stop showing the secondary ExpandMoreIcon if you've reached the Instructions step\n                    // Also, this ExpandMoreIcon should push data to the recipe object array\n                    index < steps.length - 1\n                      ? <IconButton color=\"primary\">\n                          <ExpandMoreIcon onClick={handleNext} fontSize=\"large\" />\n                        </IconButton>\n                      : false\n                  }\n                </StepContent>\n              </Step>\n            ))\n          }\n        </Stepper>\n      <div className={classes.buttonDiv}>\n      {\n        // Once all steps are completed then display the Review button\n        readyForReview && activeStep >= steps.length\n          ? <Button\n              className={classes.button}\n              variant=\"outlined\"\n              color=\"primary\"\n              href=\"/cocktail\"\n              onClick={() => console.log(\"Went to next\")}\n            >\n              Review\n            </Button>\n          : false\n      }\n      </div>\n    </main>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}