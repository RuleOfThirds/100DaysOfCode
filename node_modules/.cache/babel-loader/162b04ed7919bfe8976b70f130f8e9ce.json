{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/Providers/CocktailProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useContext, createContext } from 'react';\nconst CocktailContext = /*#__PURE__*/createContext();\nexport const useCocktail = () => {\n  _s();\n\n  return useContext(CocktailContext);\n};\n\n_s(useCocktail, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction useCocktailProvider() {\n  _s2();\n\n  const [recipe, setRecipe] = useState({});\n  const steps = ['Basic Information', 'Unit Type', 'Ingredients', 'Miscellaneous', 'Instructions'];\n  const [activeStep, setActiveStep] = useState(0);\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleNext = () => {\n    if (activeStep < steps.length) {\n      setActiveStep(prevActiveStep => prevActiveStep + 1); //      document.getElementById(`step-${activeStep}`).scrollIntoView({behavior: 'smooth'})\n    }\n  }; // So this works for BasicInfo and Instructions\n  // See comments in Ingredients.js to understand what you are trying to do better\n  // I need to get this to where it works for the above two components, but also works for Ingredients.js, (and misc for that matter)\n\n\n  const build2FromInput = event => {\n    // alternatively, I could just have this accept two args, and manually pass [event.target.name], and the other value \n    // could literally be anything\n    setRecipe({ ...recipe,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const buildFromInput = data => {\n    setRecipe({ ...recipe,\n      ...data\n    });\n    console.log(\"From provider: \", recipe);\n  }; // You are trying to get rid of this\n  // Alternatively I could simply create one for Miscellanous and have three, but that's messy. \n\n\n  const addIngredientsToCocktail = ingredientsArray => {\n    setRecipe({ ...recipe,\n      ingredients: ingredientsArray\n    });\n  };\n\n  return {\n    steps,\n    recipe,\n    handleBack,\n    handleNext,\n    activeStep,\n    buildFromInput,\n    // this should change to buildRecipe, and be used throughout the entire Cocktail stepper\n    addIngredientsToCocktail // this should be gone\n    //    addCocktailToFirestore,\n    //    updateCocktailInFirestore,\n    //    deleteCocktail,\n\n  };\n}\n\n_s2(useCocktailProvider, \"1vFSconxjpZ+vQEtcLspEL16K3A=\");\n\nexport function CocktailProvider({\n  children\n}) {\n  _s3();\n\n  const cocktail = useCocktailProvider();\n  return /*#__PURE__*/_jsxDEV(CocktailContext.Provider, {\n    value: cocktail,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(CocktailProvider, \"p2F/HEGyPwYCBXQTIzw0OTPeLk0=\", false, function () {\n  return [useCocktailProvider];\n});\n\n_c = CocktailProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CocktailProvider\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/Providers/CocktailProvider.js"],"names":["React","useState","useContext","createContext","CocktailContext","useCocktail","useCocktailProvider","recipe","setRecipe","steps","activeStep","setActiveStep","handleBack","prevActiveStep","handleNext","length","build2FromInput","event","target","name","value","buildFromInput","data","console","log","addIngredientsToCocktail","ingredientsArray","ingredients","CocktailProvider","children","cocktail"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,UAFF,EAGEC,aAHF,QAIO,OAJP;AAMA,MAAMC,eAAe,gBAAGD,aAAa,EAArC;AAEA,OAAO,MAAME,WAAW,GAAG,MAAM;AAAA;;AAC/B,SAAOH,UAAU,CAACE,eAAD,CAAjB;AACD,CAFM;;GAAMC,W;;AAIb,SAASC,mBAAT,GAA+B;AAAA;;AAC7B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMQ,KAAK,GAAG,CAAC,mBAAD,EAAsB,WAAtB,EAAmC,aAAnC,EAAkD,eAAlD,EAAmE,cAAnE,CAAd;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,CAAD,CAA5C;;AAEA,QAAMW,UAAU,GAAG,MAAM;AACvBD,IAAAA,aAAa,CAAEE,cAAD,IAAoBA,cAAc,GAAG,CAAtC,CAAb;AACD,GAFD;;AAIA,QAAMC,UAAU,GAAG,MAAM;AACvB,QAAIJ,UAAU,GAAGD,KAAK,CAACM,MAAvB,EAA+B;AAC7BJ,MAAAA,aAAa,CAAEE,cAAD,IAAoBA,cAAc,GAAG,CAAtC,CAAb,CAD6B,CAEnC;AACK;AACF,GALD,CAT6B,CAgB7B;AACA;AACA;;;AACA,QAAMG,eAAe,GAAIC,KAAD,IAAW;AACjC;AACA;AACAT,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAER,OAACU,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AAF1B,KAAD,CAAT;AAID,GAPD;;AASA,QAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/Bd,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAER,SAAGe;AAFK,KAAD,CAAT;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BjB,MAA/B;AACD,GAND,CA5B6B,CAoC7B;AACA;;;AACA,QAAMkB,wBAAwB,GAAIC,gBAAD,IAAsB;AACrDlB,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAERoB,MAAAA,WAAW,EAAED;AAFL,KAAD,CAAT;AAID,GALD;;AAOA,SAAO;AACLjB,IAAAA,KADK;AAELF,IAAAA,MAFK;AAGLK,IAAAA,UAHK;AAILE,IAAAA,UAJK;AAKLJ,IAAAA,UALK;AAMLW,IAAAA,cANK;AAMW;AAChBI,IAAAA,wBAPK,CAOqB;AAC9B;AACA;AACA;;AAVS,GAAP;AAYD;;IAzDQnB,mB;;AA2DT,OAAO,SAASsB,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAAwC;AAAA;;AAC7C,QAAMC,QAAQ,GAAGxB,mBAAmB,EAApC;AAEA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEwB,QAAjC;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IAReD,gB;UACGtB,mB;;;KADHsB,gB","sourcesContent":["import React, { \n  useState,\n  useContext, \n  createContext,\n} from 'react';\n\nconst CocktailContext = createContext();\n\nexport const useCocktail = () => {\n  return useContext(CocktailContext);  \n}\n\nfunction useCocktailProvider() {\n  const [recipe, setRecipe] = useState({});\n  const steps = ['Basic Information', 'Unit Type', 'Ingredients', 'Miscellaneous', 'Instructions'];\n  const [activeStep, setActiveStep] = useState(0);\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1)\n  }\n\n  const handleNext = () => {\n    if (activeStep < steps.length) {\n      setActiveStep((prevActiveStep) => prevActiveStep + 1)\n//      document.getElementById(`step-${activeStep}`).scrollIntoView({behavior: 'smooth'})\n    } \n  }\n\n  // So this works for BasicInfo and Instructions\n  // See comments in Ingredients.js to understand what you are trying to do better\n  // I need to get this to where it works for the above two components, but also works for Ingredients.js, (and misc for that matter)\n  const build2FromInput = (event) => {\n    // alternatively, I could just have this accept two args, and manually pass [event.target.name], and the other value \n    // could literally be anything\n    setRecipe({\n      ...recipe, \n      [event.target.name]: event.target.value\n    });\n  }\n\n  const buildFromInput = (data) => {\n    setRecipe({\n      ...recipe,\n      ...data\n    })\n    console.log(\"From provider: \", recipe)\n  }\n\n  // You are trying to get rid of this\n  // Alternatively I could simply create one for Miscellanous and have three, but that's messy. \n  const addIngredientsToCocktail = (ingredientsArray) => {\n    setRecipe({\n      ...recipe,\n      ingredients: ingredientsArray\n    })\n  }\n\n  return {\n    steps,\n    recipe,\n    handleBack,\n    handleNext,\n    activeStep,\n    buildFromInput, // this should change to buildRecipe, and be used throughout the entire Cocktail stepper\n    addIngredientsToCocktail, // this should be gone\n//    addCocktailToFirestore,\n//    updateCocktailInFirestore,\n//    deleteCocktail,\n  }\n}\n\nexport function CocktailProvider({ children }) {\n  const cocktail = useCocktailProvider();\n\n  return (\n    <CocktailContext.Provider value={cocktail}>\n      {children}\n    </CocktailContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}