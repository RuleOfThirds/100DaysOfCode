{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dj/Development/ThirdsMedia/100DaysOfCode/src/Products/CardList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Container, Grid, Link, Card, CardActionArea, CardContent, CardMedia, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nconst sizes = [150, 195, 240, 285];\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n    gridTemplateColumns: 'repeat(auto-fill, 250px)'\n  },\n  card: {\n    background: 'rgba(0,0,0,0.3)',\n    textAlign: 'center',\n    borderRadius: 16,\n    width: 220\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  },\n  text: {\n    fontFamily: 'Nunito'\n  }\n}));\nexport default function CardList({\n  collection,\n  data\n}) {\n  _s();\n\n  const classes = useStyles();\n  useEffect(() => {\n    const data = []; // Get all the cocktails from the database\n\n    firebase.firestore().collection(collection).get().then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        data.push(doc.data());\n      });\n      setCocktailList(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      className: classes.root,\n      children: data.map(card => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: `/cocktail/${card.id}`,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              raised: true,\n              className: classes.card,\n              children: /*#__PURE__*/_jsxDEV(CardActionArea, {\n                children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n                  style: {\n                    height: sizes[Math.floor(Math.random() * 4)]\n                  },\n                  image: card.picture\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    gutterBottom: true,\n                    variant: \"h5\",\n                    component: \"h2\",\n                    className: classes.text,\n                    children: card.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 68,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    className: classes.content,\n                    justify: \"center\",\n                    children: card.ingredients.map(item => {\n                      return /*#__PURE__*/_jsxDEV(Typography, {\n                        variant: \"body2\",\n                        color: \"textSecondary\",\n                        component: \"p\",\n                        children: item.name + \", \"\n                      }, item.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 80,\n                        columnNumber: 31\n                      }, this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 76,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CardList, \"OAQf9SHEQQsOOZKjohcuI3tGtQ0=\", false, function () {\n  return [useStyles];\n});\n\n_c = CardList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardList\");","map":{"version":3,"sources":["/home/dj/Development/ThirdsMedia/100DaysOfCode/src/Products/CardList.js"],"names":["React","Container","Grid","Link","Card","CardActionArea","CardContent","CardMedia","Typography","makeStyles","sizes","useStyles","theme","root","marginTop","spacing","gridTemplateColumns","card","background","textAlign","borderRadius","width","content","display","flexDirection","justifyContent","text","fontFamily","CardList","collection","data","classes","useEffect","firebase","firestore","get","then","querySnapshot","forEach","doc","push","setCocktailList","map","id","height","Math","floor","random","picture","name","ingredients","item"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,SADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,cALF,EAMEC,WANF,EAOEC,SAPF,EAQEC,UARF,QASO,mBATP;AAUA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,MAAMC,KAAK,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAd;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAACG,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CADP;AAEJC,IAAAA,mBAAmB,EAAE;AAFjB,GAD+B;AAKrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE,iBADR;AAEJC,IAAAA,SAAS,EAAE,QAFP;AAGJC,IAAAA,YAAY,EAAE,EAHV;AAIJC,IAAAA,KAAK,EAAE;AAJH,GAL+B;AAWrCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE,MADF;AAEPC,IAAAA,aAAa,EAAE,QAFR;AAGPC,IAAAA,cAAc,EAAE;AAHT,GAX4B;AAgBrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE;AADR;AAhB+B,CAAL,CAAN,CAA5B;AAqBA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAlB,EAAwC;AAAA;;AACrD,QAAMC,OAAO,GAAGpB,SAAS,EAAzB;AAEAqB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMF,IAAI,GAAG,EAAb,CADc,CAEd;;AACAG,IAAAA,QAAQ,CAACC,SAAT,GAAqBL,UAArB,CAAgCA,UAAhC,EACGM,GADH,GAEGC,IAFH,CAEQC,aAAa,IAAI;AACrBA,MAAAA,aAAa,CAACC,OAAd,CAAsBC,GAAG,IAAI;AAC3BT,QAAAA,IAAI,CAACU,IAAL,CAAUD,GAAG,CAACT,IAAJ,EAAV;AACD,OAFD;AAGAW,MAAAA,eAAe,CAACX,IAAD,CAAf;AACD,KAPH;AAQD,GAXQ,EAWN,EAXM,CAAT;AAaA,sBACE,QAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAA4B,MAAA,SAAS,EAAEC,OAAO,CAAClB,IAA/C;AAAA,gBAEEiB,IAAI,CAACY,GAAL,CAAUzB,IAAD,IAAU;AACjB,4BACE,QAAC,IAAD;AAAoB,UAAA,IAAI,MAAxB;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,IAAI,EAAG,aAAYA,IAAI,CAAC0B,EAAG,EAAjC;AAAA,mCACE,QAAC,IAAD;AAAM,cAAA,MAAM,MAAZ;AAAa,cAAA,SAAS,EAAEZ,OAAO,CAACd,IAAhC;AAAA,qCACE,QAAC,cAAD;AAAA,wCACE,QAAC,SAAD;AACE,kBAAA,KAAK,EAAE;AAAC2B,oBAAAA,MAAM,EAAElC,KAAK,CAACmC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD;AAAd,mBADT;AAEE,kBAAA,KAAK,EAAE9B,IAAI,CAAC+B;AAFd;AAAA;AAAA;AAAA;AAAA,wBADF,eAKE,QAAC,WAAD;AAAA,0CACE,QAAC,UAAD;AACE,oBAAA,YAAY,MADd;AAEE,oBAAA,OAAO,EAAC,IAFV;AAGE,oBAAA,SAAS,EAAC,IAHZ;AAIE,oBAAA,SAAS,EAAEjB,OAAO,CAACL,IAJrB;AAAA,8BAMGT,IAAI,CAACgC;AANR;AAAA;AAAA;AAAA;AAAA,0BADF,eASE,QAAC,IAAD;AAAM,oBAAA,SAAS,MAAf;AAAgB,oBAAA,SAAS,EAAElB,OAAO,CAACT,OAAnC;AAA4C,oBAAA,OAAO,EAAC,QAApD;AAAA,8BAEIL,IAAI,CAACiC,WAAL,CAAiBR,GAAjB,CAAsBS,IAAD,IAAU;AAC7B,0CACE,QAAC,UAAD;AAEE,wBAAA,OAAO,EAAC,OAFV;AAGE,wBAAA,KAAK,EAAC,eAHR;AAIE,wBAAA,SAAS,EAAC,GAJZ;AAAA,kCAMGA,IAAI,CAACF,IAAL,GAAU;AANb,yBACOE,IAAI,CAACR,EADZ;AAAA;AAAA;AAAA;AAAA,8BADF;AAUD,qBAXD;AAFJ;AAAA;AAAA;AAAA;AAAA,0BATF;AAAA;AAAA;AAAA;AAAA;AAAA,wBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,WAAW1B,IAAI,CAAC0B,EAAhB;AAAA;AAAA;AAAA;AAAA,gBADF;AAwCD,OAzCD;AAFF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkDD;;GAlEuBf,Q;UACNjB,S;;;KADMiB,Q","sourcesContent":["import React from 'react';\nimport {\n  Container,\n  Grid,\n  Link,\n  Card,\n  CardActionArea,\n  CardContent,\n  CardMedia,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst sizes = [150, 195, 240, 285];\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n    gridTemplateColumns: 'repeat(auto-fill, 250px)',\n  },\n  card: {\n    background: 'rgba(0,0,0,0.3)',\n    textAlign: 'center',\n    borderRadius: 16, \n    width: 220,\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  text: {\n    fontFamily: 'Nunito',\n  },\n}));\n\nexport default function CardList({ collection, data }) {\n  const classes = useStyles();\n\n  useEffect(() => {\n    const data = [];\n    // Get all the cocktails from the database\n    firebase.firestore().collection(collection)\n      .get()\n      .then(querySnapshot => {\n        querySnapshot.forEach(doc => {\n          data.push(doc.data());\n        })\n        setCocktailList(data);\n      })\n  }, []);\n\n  return (\n    <Container maxWidth='xl'>\n      <Grid container spacing={3} className={classes.root}>\n      {\n        data.map((card) => {\n          return (\n            <Grid key={card.id} item>\n              <Link href={`/cocktail/${card.id}`}>\n                <Card raised className={classes.card}>\n                  <CardActionArea>\n                    <CardMedia\n                      style={{height: sizes[Math.floor(Math.random() * 4)]}}\n                      image={card.picture}\n                    />\n                    <CardContent>\n                      <Typography \n                        gutterBottom \n                        variant=\"h5\" \n                        component=\"h2\"\n                        className={classes.text}\n                      >\n                        {card.name}\n                      </Typography>\n                      <Grid container className={classes.content} justify='center'>\n                        {\n                          card.ingredients.map((item) => {\n                            return (\n                              <Typography \n                                key={item.id}\n                                variant=\"body2\" \n                                color=\"textSecondary\" \n                                component=\"p\" \n                              >\n                                {item.name+\", \"}\n                              </Typography>\n                            );\n                          })\n                        }\n                      </Grid>\n                    </CardContent>\n                  </CardActionArea>\n                </Card>\n              </Link>\n            </Grid>\n          )\n        })\n      }\n      </Grid>\n    </Container>\n  );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}